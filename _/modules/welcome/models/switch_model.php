<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');
/* * *******************************************************************************************************************
 * Client  Name ：  IFRC
 * ---------------------------------------------------------------------------------------------------------------------
 * Project Name ：  IMS v3.0
 * ---------------------------------------------------------------------------------------------------------------------
 * Program Name ：  indexes_model.php
 * ---------------------------------------------------------------------------------------------------------------------
 * Entry Server ：
 * ---------------------------------------------------------------------------------------------------------------------
 * Called By    ：  System
 * ---------------------------------------------------------------------------------------------------------------------
 * Notice       ：
 * ---------------------------------------------------------------------------------------------------------------------
 * Copyright    ：  IFRC
 * ---------------------------------------------------------------------------------------------------------------------
 * Comment      ：
 * ---------------------------------------------------------------------------------------------------------------------
 * History      ：
 * ---------------------------------------------------------------------------------------------------------------------
 * Version V001 ：  2012.09.20 (LongNguyen)        New Create
 * ******************************************************************************************************************* */

class Indexes_model extends CI_Model {

    public $table = 'category';
    public $cur_rates = 'cur_rates';
    public $switch_cur_rates = 'switch_cur_rates';
    public $idx_ca = 'idx_ca';
    public $switch_idx_ca = 'switch_idx_ca';
    public $switch_idx_calendar = 'switch_idx_calendar';
    public $idx_calendar = 'idx_calendar';
    public $idx_ref = 'idx_ref';
    public $switch_idx_ref = 'switch_idx_ref';
    public $mar_ref = 'mar_ref';
    public $switch_mar_ref = 'switch_mar_ref';
    public $sec_ref = 'sec_ref';
    public $switch_sec_ref = 'switch_sec_ref';
    public $stk_div = 'stk_div';
    public $switch_stk_div = 'switch_stk_div';
    public $stk_feed = 'stk_feed';
    public $switch_stk_feed = 'switch_stk_feed';
    public $stk_ref = 'stk_ref';
    public $switch_stk_ref = 'switch_stk_ref';
    public $category_description = 'category_description';
    public $stk_prices_histoday = 'stk_prices_histoday';
    public $stk_prices = 'stk_prices';
    public $switch_stk_prices = 'switch_stk_prices';
    public $idx_specs_histoday = 'idx_specs_histoday';
    public $idx_composition_histoday = 'idx_composition_histoday';
    public $idx_compo = 'idx_compo';
    public $switch_idx_compo = 'switch_idx_compo';
    public $idx_composition = 'idx_composition';
    public $switch_idx_composition = 'switch_idx_composition';
    public $idx_specs = 'idx_specs';
    public $switch_idx_specs = 'switch_idx_specs';
    public $setting = 'setting';
    public $switch_setting = 'switch_setting';
    public $idx_events = 'idx_events';
    private $cal_dates;

    /*     * ***********************************************************************************************************
     * Name         ： __construct
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：list articles by id (if exist) and language 
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function __construct() {
        parent::__construct();
        $data = $this->registry->get('setting');
        if (isset($data['calculation_date'])) {
            $this->cal_dates = str_replace(' ', '', $data['calculation_date']);
        }
    }

    /*     * ***********************************************************************************************************
     * Name         ： del_indexes
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function del_indexes($table) {
        $this->db->empty_table($this->tables->get($table));
    }

    /*     * ***********************************************************************************************************
     * Name         ： insert_indexes
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function insert_indexes($table, $arr) {
        if ($table == 'idx_specs') {
            if (isset($arr['idx_code']) == TRUE && $arr['idx_code'] != '')
                $this->db->insert($this->tables->get($table), $arr);
        } else
            $this->db->insert($this->tables->get($table), $arr);
    }

    /*     * ***********************************************************************************************************
     * Name         ： update_tables
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function update_tables($table, $arr, $col) {
        $sql = "SELECT * FROM " . $this->tables->get($table) . " WHERE $col = '" . $arr[$col] . "'";
        $query = $this->db->query($sql);
        if ($query->num_rows() == 0) {
            $this->insert_indexes($this->tables->get($table), $arr);
        }
        return 1;
    }

    /*     * ***********************************************************************************************************
     * Name         ： del_record
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function del_record($table, $where) {
        $this->db->delete($this->tables->get($table), $where);
    }

    /*     * ***********************************************************************************************************
     * Name         ： edit_tables
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function edit_tables($table, $arr, $id) {
        $this->db->where('id', $id);
        $this->db->update($this->tables->get($table), $arr);
    }

    /*     * ***********************************************************************************************************
     * Name         ： get_table_files
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function get_table_files($where = NULL) {
        if ($where != NULL) {
            $sql = "SELECT * FROM " . $this->tables->get('idx_files') . " WHERE $where";
        } else {
            $sql = "SELECT * FROM " . $this->tables->get('idx_files');
        }
        return $this->db->query($sql)->result_array();
    }

    /*     * ***********************************************************************************************************
     * Name         ： exportdata
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function exportdata($table, $fields) {
        $sql = "SELECT $fields FROM " . $this->tables->get($table) . " ORDER BY id DESC";
        return $this->db->query($sql)->result_array();
    }

    /*     * ***********************************************************************************************************
     * Name         ： get_field_table
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function get_field_table($table) {
        $data_fiels = $this->db->query("SHOW FIELDS FROM " . $this->tables->get($table))->result_array();
        $fields = NULL;
        foreach ($data_fiels as $v) {
            $fields.=$v['Field'] . chr(9);
        }
        return $fields;
    }

    /*     * ***********************************************************************************************************
     * Name         ： showstructure
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function showstructure($table) {
        $sql = "SHOW COLUMNS FROM " . $this->tables->get($table);
        return $this->db->query($sql)->result_array();
    }

    /* phần tính cho Preparation--------------------------------------------------------------------------------------- */
    /*     * ***********************************************************************************************************
     * Name         ： inportDataIdx_compositionFromIdx_compo
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：import data table idx_composition from table idx_compo
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function inportDataIdx_compositionFromIdx_compo() {
        $this->db->select('stk_code,stk_name,stk_shares_idx,stk_float_idx,stk_capp_idx,idx_code,date');
        $data = $this->db->get($this->tables->idx_compo)->result_array();
        if (is_array($data) == TRUE && count($data) > 0) {
            return $this->db->insert_batch($this->tables->idx_composition, $data);
        }
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFieldsOfIDX_compositionFromSTK_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table idx_composition set stk_curr = stk_curr,stk_mult = stk_mult in table stk_ref
     *              ：where idx_composition.stk_code = stk_ref.stk_code
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFieldsOfIDX_compositionFromSTK_ref() {
        $sql = "UPDATE " . $this->tables->idx_composition . "," . $this->tables->stk_ref . "
                SET     " . $this->tables->idx_composition . ".stk_curr = " . $this->tables->stk_ref . ".stk_curr,
                        " . $this->tables->idx_composition . ".stk_mult = " . $this->tables->stk_ref . ".stk_mult
                        WHERE " . $this->tables->idx_composition . ".stk_code = " . $this->tables->stk_ref . ".stk_code";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFieldsIDX_compositionFromSTK_div
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table idx_composition from stk_div
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFieldsIDX_compositionFromSTK_div() {
        $sql = "UPDATE " . $this->tables->idx_composition . "," . $this->tables->stk_div . "
                SET " . $this->tables->idx_composition . ".stk_dprice = " . $this->tables->stk_div . ".stk_divgross
                WHERE " . $this->tables->idx_composition . ".stk_code = " . $this->tables->stk_div . ".stk_code
                      AND " . $this->tables->idx_composition . ".date = " . $this->tables->stk_div . ".exdate";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateSTK_pricesFromSEC_refMAR_refSTK_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table STK_prices from stk_ref
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateSTK_pricesFromSEC_refMAR_refSTK_ref() {
        $sql = "UPDATE " . $this->tables->stk_prices . "," . $this->tables->stk_ref . "
                SET     " . $this->tables->stk_prices . ".stk_name = " . $this->tables->stk_ref . ".stk_name,
                        " . $this->tables->stk_prices . ".stk_curr = " . $this->tables->stk_ref . ".stk_curr,
                        " . $this->tables->stk_prices . ".stk_mult = " . $this->tables->stk_ref . ".stk_mult
                WHERE   " . $this->tables->stk_prices . ".stk_code = " . $this->tables->stk_ref . ".stk_code
                AND     " . $this->tables->stk_prices . ".stk_market = " . $this->tables->stk_ref . ".stk_market
                AND     " . $this->tables->stk_prices . ".stk_sector = " . $this->tables->stk_ref . ".stk_sector";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_compositionIDX_currFromIDX_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_composition from IDX_ref
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_compositionIDX_currFromIDX_ref() {
        $sql = "UPDATE " . $this->tables->idx_composition . "," . $this->tables->idx_ref . "
                SET     " . $this->tables->idx_composition . ".idx_curr=" . $this->tables->idx_ref . ".idx_curr
                WHERE   " . $this->tables->idx_composition . ".idx_code = " . $this->tables->idx_ref . ".idx_code";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateToAdjust_IDX_ca
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_ca
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.24 (AnhNguyen)
     * *************************************************************************************************************** */

    public function updateToAdjust_IDX_ca() {
        $sql = "UPDATE " . $this->tables->idx_ca . ",
                (SELECT " . $this->tables->idx_calendar . ".nxt_date
                FROM " . $this->tables->idx_calendar . ", setting
                WHERE " . $this->tables->idx_calendar . ".date = setting.value
                AND setting.key = 'calculation_date') AS temp
                SET " . $this->tables->idx_ca . ".to_adjust = IF(stk_split = 1, 0, 1)
                WHERE " . $this->tables->idx_ca . ".date = temp.nxt_date;";
        return $this->db->simple_query($sql);
    }

    /* end phần tính cho Preparation---------------------------------------------------------------------------------- */

    /*     * ***********************************************************************************************************
     * Name         ： setIDX_lastOnIDX_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： set idx_last và idx_mcap  và idx_dcap = 0 trước nkhi tính indexes
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function setIDX_lastOnIDX_specs() {
        $sql = "UPDATE " . $this->tables->idx_specs . "
         SET     idx_last=0,idx_mcap=0,`idx_dcap`=0";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateSTK_priceFromSTK_feed
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table stk_price from table stk_feed
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateSTK_priceFromSTK_feed() {
        //        $sql = "UPDATE stk_prices,stk_feed,stk_ref
        //                SET     stk_prices.date = stk_feed.date,
        //                        stk_prices.time = (select `time` from idx_composition limit 1),
        //                        stk_prices.stk_last = stk_feed.stk_last
        //                WHERE stk_prices.stk_code = stk_ref.stk_code
        //                AND stk_feed.ticker = stk_ref.stk_code";
        //        return $this->db->simple_query($sql);
        /* update 20130524: Anh Nguyen */
        $sql = "UPDATE `" . $this->tables->stk_prices . "`, `" . $this->tables->stk_feed . "`, `" . $this->tables->stk_ref . "`
                SET `" . $this->tables->stk_prices . "`.`date` = `" . $this->tables->stk_feed . "`.`date`, `" . $this->tables->stk_prices . "`.`stk_last` = `" . $this->tables->stk_feed . "`.`stk_last`
                WHERE `" . $this->tables->stk_prices . "`.`stk_code` = `" . $this->tables->stk_ref . "`.`stk_code`
                AND `" . $this->tables->stk_feed . "`.`ticker` = `" . $this->tables->stk_ref . "`.`stk_code`;";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFieldsOfSTK_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table STK_prices
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFieldsOfSTK_prices() {
        //        $sql = "UPDATE stk_prices set stk_prices.stk_price = stk_prices.stk_last WHERE stk_prices.stk_last <> 0";
        //        $this->db->simple_query($sql);
        //        $sql = "UPDATE stk_prices set stk_prices.stk_price = stk_prices.stk_rlast WHERE stk_prices.stk_last = 0";
        //        return $this->db->simple_query($sql);
        $sql = "UPDATE " . $this->tables->stk_prices . " set stk_price = IF(stk_last <> 0, stk_last, stk_rlast);";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_compositionFromSTK_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_composition from STK_prices
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_compositionFromSTK_prices() {
        $sql = "UPDATE " . $this->tables->idx_composition . "," . $this->tables->stk_prices . "
                SET " . $this->tables->idx_composition . ".stk_price = " . $this->tables->stk_prices . ".stk_price
                WHERE " . $this->tables->idx_composition . ".stk_code = " . $this->tables->stk_prices . ".stk_code";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateOfIDX_compositionFromCURR_dates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update table IDX_composition from CURR_dates
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateOfIDX_compositionFromCURR_dates() {
        /* update 20130523: Anh Nguyen */
        $sql = "UPDATE {$this->tables->idx_composition}
                SET curr_conv = IF(stk_curr = idx_curr, 1, NULL);";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}, {$this->tables->cur_rates}
                SET {$this->tables->idx_composition}.curr_conv = {$this->tables->cur_rates}.curr_conv
                WHERE CONCAT({$this->tables->idx_composition}.stk_curr, {$this->tables->idx_composition}.idx_curr) = {$this->tables->cur_rates}.code;";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}, {$this->tables->cur_rates}
                SET {$this->tables->idx_composition}.curr_conv = 1 / {$this->tables->cur_rates}.curr_conv
                WHERE CONCAT({$this->tables->idx_composition}.idx_curr, {$this->tables->idx_composition}.stk_curr) = {$this->tables->cur_rates}.code;";
        $this->db->simple_query($sql);

        /* end update */
        $sql = "update {$this->tables->cur_rates}
                set time = (select time from {$this->tables->idx_composition} limit 1);";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： caculateSTK_curr_convSTK_mcap_idxOnIDX_compositon
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： calculate STK_curr_conv STK_mcap_idxOn in table IDX_compositon
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function caculateSTK_curr_convSTK_mcap_idxOnIDX_compositon() {
        //  $sql = "UPDATE idx_composition  SET stk_curr_conv = stk_price * curr_conv";
        //  $this->db->query($sql);
        $sql = "UPDATE {$this->tables->idx_composition}
                SET stk_curr_conv = stk_price * curr_conv";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}
                SET stk_mcap_idx = stk_shares_idx * (stk_float_idx/100)*(stk_capp_idx/100)*(1/stk_mult)*stk_curr_conv";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： caculateSTK_dcurr_convSTK_dcap_idxOnIDX_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： calculate STK_dcurr_conv STK_dcap_idx in table OnIDX_composition
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function caculateSTK_dcurr_convSTK_dcap_idxOnIDX_composition() {
        /* $sql = "UPDATE idx_composition
          SET stk_dcurr_conv = stk_dprice * curr_conv";
          $this->db->query($sql); */
        $sql = "UPDATE {$this->tables->idx_composition}
                SET stk_dcurr_conv = stk_dprice * curr_conv";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}
                SET stk_dcap_idx = stk_shares_idx*(stk_float_idx/100)*(stk_capp_idx/100)*(1/stk_mult)*stk_dcurr_conv";
        return $this->db->simple_query($sql);
    }

    /* TUAN ANH 14-09-2012 */
    /* Update times = now() before calculate indexes on table IDX_composition */

    /*     * ***********************************************************************************************************
     * Name         ： updateTimesOnIDX_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update time  = now
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateTimesOnIDX_composition() {
        $sql = "UPDATE {$this->tables->idx_composition}, {$this->tables->setting}
                SET {$this->tables->idx_composition}.time = {$this->tables->setting}.value
                WHERE {$this->tables->setting}.key = 'calculation_time';";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_specsFromIDX_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update IDX_specs From IDX_composition
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_specsFromIDX_composition() {
        $sql = "UPDATE {$this->tables->idx_specs}, {$this->tables->idx_composition}
                SET {$this->tables->idx_specs}.date = {$this->tables->idx_composition}.date, {$this->tables->idx_specs}.time = {$this->tables->idx_composition}.time
                WHERE {$this->tables->idx_specs}.idx_mother = {$this->tables->idx_composition}.idx_code";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_specs}, {$this->tables->idx_composition}
              SET {$this->tables->idx_specs}.idx_mcap = (SELECT SUM({$this->tables->idx_composition}.stk_mcap_idx) FROM {$this->tables->idx_composition} where {$this->tables->idx_composition}.idx_code ={$this->tables->idx_specs}.idx_mother)/{$this->tables->idx_specs}.idx_conv,
                  {$this->tables->idx_specs}.idx_dcap = ((SELECT SUM({$this->tables->idx_composition}.stk_dcap_idx) FROM {$this->tables->idx_composition} where {$this->tables->idx_composition}.idx_code ={$this->tables->idx_specs}.idx_mother)/ {$this->tables->idx_specs}.idx_conv)
              WHERE {$this->tables->idx_specs}.idx_mother = {$this->tables->idx_composition}.idx_code";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIDX_specsFromCUR_rates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： update IDX_specs From CUR_rates
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIDX_specsFromCUR_rates() {
        //        $this->db->simple_query('update `idx_specs` set `idx_conv` =0');
        //        $sql = "UPDATE idx_specs
        //                SET     idx_specs.idx_conv =1
        //                WHERE    idx_specs.idx_code=idx_specs.idx_mother";
        //        $this->db->simple_query($sql);
        //
        //        $sql = "UPDATE idx_specs CR,cur_rates
        //                SET         CR.`idx_conv` =cur_rates.curr_conv
        //                WHERE    CONCAT(CR.idx_curr,(SELECT DISTINCT idx_curr FROM (SELECT idx_curr,idx_code FROM idx_specs) as X WHERE X.idx_code=CR.idx_mother)) =cur_rates.code
        //                AND         CR.idx_code != CR.idx_mother";
        //        return $this->db->simple_query($sql);
        /* update 20130524: Anh Nguyen (convert currency idx_specs) */
        $sql = "UPDATE {$this->tables->idx_specs}
                SET idx_conv = 1
                WHERE idx_code = idx_mother;";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_specs}, {$this->tables->cur_rates}
                SET {$this->tables->idx_specs}.`idx_conv` = {$this->tables->cur_rates}.`curr_conv`
                WHERE CONCAT({$this->tables->idx_specs}.`idx_curr`, (SELECT DISTINCT `idx_curr` FROM (SELECT `idx_curr`, `idx_code` FROM {$this->tables->idx_specs}) AS `temp` WHERE `temp`.`idx_code` = {$this->tables->idx_specs}.`idx_mother`)) = {$this->tables->cur_rates}.`code`
                AND {$this->tables->idx_specs}.`idx_code` != {$this->tables->idx_specs}.`idx_mother`;";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_specs}, {$this->tables->cur_rates}
                SET {$this->tables->idx_specs}.`idx_conv` = 1 / {$this->tables->cur_rates}.`curr_conv`
                WHERE CONCAT((SELECT DISTINCT `idx_curr` FROM (SELECT `idx_curr`, `idx_code` FROM {$this->tables->idx_specs}) AS `temp` WHERE `temp`.`idx_code` = {$this->tables->idx_specs}.`idx_mother`), {$this->tables->idx_specs}.`idx_curr`) = {$this->tables->cur_rates}.`code`
                AND {$this->tables->idx_specs}.`idx_code` != {$this->tables->idx_specs}.`idx_mother`;";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： caculateIDX_lastOnIDX_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： caculate IDX_last On IDX_specs
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function caculateIDX_lastOnIDX_specs() {
        $sql = "UPDATE     {$this->tables->idx_specs} AS CR
                SET         idx_last = idx_base*idx_mcap/idx_divisor
                WHERE      idx_type='P'";
        $this->db->simple_query($sql);
        //test
        // tinh A
        //
        //        $sql = 'UPDATE idx_specs AS CR SET ip_last= (SELECT idx_last FROM (SELECT idx_curr,idx_last,idx_type,idx_mother FROM idx_specs) as X
        //                WHERE X.idx_mother=CR.idx_mother
        //                AND X.idx_curr=CR.idx_curr
        //                AND X.idx_type="P")
        //                WHERE     CR.idx_type="R"';

        /* update Anh Nguyen 20130521: ip_last */
        $sql = "UPDATE {$this->tables->idx_specs},
                (SELECT `idx_curr`, `idx_last`, `idx_type`, `idx_mother`
                FROM {$this->tables->idx_specs}
                WHERE `idx_type` = 'P') AS `temp`
                SET {$this->tables->idx_specs}.`ip_last` = `temp`.`idx_last`
                WHERE {$this->tables->idx_specs}.`idx_type` = 'R'
                AND {$this->tables->idx_specs}.`idx_mother` = `temp`.`idx_mother`
                AND {$this->tables->idx_specs}.`idx_curr` = `temp`.`idx_curr`;";

        $this->db->simple_query($sql);
        //tinh B
        //        $sql = 'UPDATE idx_specs AS CR SET ip_plast= (SELECT idx_plast FROM (SELECT idx_curr,idx_plast,idx_type,idx_mother FROM idx_specs) as X
        //                WHERE X.idx_mother=CR.idx_mother
        //                AND X.idx_curr=CR.idx_curr
        //                AND X.idx_type="P")
        //                WHERE CR.idx_type="R"';

        /* update Anh Nguyen 20130521: ip_plast */
        $sql = "UPDATE {$this->tables->idx_specs},
                (SELECT `idx_curr`, `idx_plast`, `idx_type`, `idx_mother`
                FROM {$this->tables->idx_specs}
                WHERE `idx_type` = 'P') AS `temp`
                SET {$this->tables->idx_specs}.`ip_plast` = `temp`.`idx_plast`
                WHERE {$this->tables->idx_specs}.`idx_type` = 'R'
                AND {$this->tables->idx_specs}.`idx_mother` = `temp`.`idx_mother`
                AND {$this->tables->idx_specs}.`idx_curr` = `temp`.`idx_curr`;";
        $this->db->simple_query($sql);

        //        $sql = 'UPDATE     idx_specs AS CR
        //                SET         CR.idx_last = CR.idx_pclose/(SELECT idx_pclose FROM (SELECT idx_curr,idx_pclose,idx_type,idx_mother FROM idx_specs) as X
        //                WHERE X.idx_mother=CR.idx_mother
        //                AND X.idx_curr=CR.idx_curr
        //                AND X.idx_type="P")*((SELECT idx_last FROM (SELECT idx_curr,idx_last,idx_type,idx_mother FROM idx_specs) as Y
        //                WHERE Y.idx_mother=CR.idx_mother
        //                AND Y.idx_curr=CR.idx_curr
        //                AND Y.idx_type="P")+(CR.idx_base*CR.idx_dcap/CR.idx_divisor))
        //                WHERE     CR.idx_type="R"';
        /* update Anh Nguyen 20130521: idx_last */
        $sql = "UPDATE {$this->tables->idx_specs},
                (SELECT `idx_code`, `idx_curr`, `idx_last`, `idx_pclose`, `idx_type`, `idx_mother`
                FROM {$this->tables->idx_specs}
                WHERE `idx_type` = 'P') AS `temp`
                SET {$this->tables->idx_specs}.`idx_last` = {$this->tables->idx_specs}.`idx_pclose` / `temp`.`idx_pclose` * (`temp`.`idx_last` + ({$this->tables->idx_specs}.`idx_base` * {$this->tables->idx_specs}.`idx_dcap` / {$this->tables->idx_specs}.`idx_divisor`))
                WHERE {$this->tables->idx_specs}.`idx_type` = 'R'
                AND {$this->tables->idx_specs}.`idx_mother` = `temp`.`idx_mother`
                AND {$this->tables->idx_specs}.`idx_curr` = `temp`.`idx_curr`
                AND LEFT({$this->tables->idx_specs}.`idx_mother`, LENGTH({$this->tables->idx_specs}.`idx_mother`) - 5) = LEFT(`temp`.`idx_code`, LENGTH(`temp`.`idx_code`) - 5);";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： calculateIdx_dvarIdx_varRecordsOnIdx_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： IDX_Dvar Rrecords On idx_Specs and STK_wgtOn Composition
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function calculateIdx_dvarIdx_varRecordsOnIdx_specs() {
        //        $sql = 'UPDATE idx_specs
        //                SET idx_specs.idx_dvar = 100*(idx_specs.idx_last - idx_specs.idx_pclose)/idx_specs.idx_pclose';
        //        $this->db->query($sql);

        $sql = "UPDATE {$this->tables->idx_specs}, {$this->tables->idx_composition}
              SET {$this->tables->idx_specs}.records  = (SELECT count({$this->tables->idx_composition}.stk_code) FROM {$this->tables->idx_composition} where idx_code = {$this->tables->idx_specs}.idx_mother)
              WHERE {$this->tables->idx_specs}.idx_mother = {$this->tables->idx_composition}.idx_code";
        $this->db->simple_query($sql);

        //        $sql = "UPDATE idx_specs
        //              SET idx_specs.idx_var = 100*(idx_specs.idx_last - idx_specs.idx_plast)/idx_specs.idx_plast
        //              WHERE idx_specs.idx_plast <> 0";
        //        $this->db->query($sql);
        $sql = "UPDATE {$this->tables->idx_specs}
                SET idx_change = idx_last - idx_plast,
                idx_dchange = idx_last - idx_pclose,
                idx_var = 100 * (idx_last - idx_plast) / idx_plast,
                idx_dvar = 100 * (idx_last - idx_pclose) / idx_pclose";
        return $this->db->simple_query($sql);
    }

    public function calculateStk_wgtOnIdx_composition() {
        //        $sql = 'UPDATE idx_composition CR SET CR.stk_wgt= stk_mcap_idx/(SELECT sum(stk_mcap_idx) FROM (SELECT idx_code,stk_mcap_idx FROM idx_composition) as X
        //                WHERE X.idx_code=CR.idx_code)*100';
        $sql = "UPDATE {$this->tables->idx_composition},
                (SELECT idx_code, SUM(stk_mcap_idx) AS sum_stk_mcap_idx
                FROM {$this->tables->idx_composition}
                GROUP BY idx_code) AS temp
                SET {$this->tables->idx_composition}.stk_wgt = {$this->tables->idx_composition}.stk_mcap_idx / temp.sum_stk_mcap_idx * 100
                WHERE {$this->tables->idx_composition}.idx_code = temp.idx_code;";
        return $this->db->simple_query($sql);
    }

    /*     * **********************************************************************************************************
     * Tính Adjustment*************************************************************************************************
     * ************************************************************************************************************** */


    /*     * ***********************************************************************************************************
     * Name         ：addColumnNxt_date
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：add Column nxt_date
     *              ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.21 (LongNguyen)
     * *************************************************************************************************************** */

    public function addColumnNxt_date() {

        $sql = "UPDATE {$this->tables->idx_composition} SET nxt_date =0";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}
                SET nxt_date =(SELECT `value` FROM `setting` WHERE `key`='nxt_date' LIMIT 1), nxt_stk_code = stk_code,
                nxt_stk_curr = stk_curr, nxt_stk_mult = stk_mult;";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}
                SET nxt_shares_idx=stk_shares_idx,
                nxt_float_idx=stk_float_idx,
                nxt_capp_idx=stk_capp_idx,
                nxt_price=stk_price;";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： addFromIdx_ca
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function addFromIdx_ca() {
        $ids2 = array();
        $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM {$this->tables->idx_composition};";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        foreach ($ids as $value) {
            $ids2[] = $value['t'];
        }
        $ids = implode($ids2, "','");
        unset($ids2);
        $sql = "INSERT INTO {$this->tables->idx_composition} (stk_code,idx_code,nxt_date, to_adjust) SELECT {$this->tables->idx_ca}.stk_code,
                {$this->tables->idx_ca}.idx_code,{$this->tables->idx_ca}.date,{$this->tables->idx_ca}.to_adjust
                FROM {$this->tables->idx_ca}
                    WHERE    {$this->tables->idx_ca}.intro=1
                        AND {$this->tables->idx_ca}.date = (SELECT nxt_date FROM {$this->tables->idx_composition} LIMIT 1)
                    AND     CONCAT({$this->tables->idx_ca}.stk_code,{$this->tables->idx_ca}.idx_code) NOT IN
                (SELECT CONCAT({$this->tables->idx_composition}.stk_code,{$this->tables->idx_composition}.idx_code) FROM {$this->tables->idx_composition})";
        $this->db->simple_query($sql);

        $sql = "DROP TABLE IF EXISTS {$this->tables->temp_idx_composition};";
        $this->db->simple_query($sql);

        $sql = "CREATE TABLE {$this->tables->temp_idx_composition} SELECT * FROM {$this->tables->idx_composition};";
        $this->db->simple_query($sql);

        $sql = "SELECT id FROM {$this->tables->idx_composition} where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        if (is_array($ids) == TRUE && count($ids) > 0) {
            foreach ($ids as $value) {
                $ids2[] = $value['id'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            return $ids;
        }
    }

    /*     * ***********************************************************************************************************
     * Name         ： deleteRemovalFromIDX_ca
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function deleteRemovalFromIDX_ca() {
        $sql = "update {$this->tables->idx_composition} AS CO, idx_ca as CA
                set CO.nxt_date = 0, CO.to_adjust = 1
                where CONCAT(CO.stk_code,CO.idx_code) = CONCAT(CA.stk_code,CA.idx_code) and CA.date = CO.nxt_date and CA.removal=1;";
        return $this->db->simple_query($sql);
        /* end update */
    }

    /*     * ***********************************************************************************************************
     * Name         ： copyNewShareFloatCappingPrice
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function copyNewShareFloatCappingPrice() {
        
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateNewShareFloatCappingPrice
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateNewShareFloatCappingPrice() {
        $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->idx_ca}
                SET     {$this->tables->idx_composition}.new_shares={$this->tables->idx_ca}.new_shares, {$this->tables->idx_composition}.nxt_shares_idx={$this->tables->idx_ca}.new_shares,
                {$this->tables->idx_composition}.to_adjust = 1
                WHERE CONCAT({$this->tables->idx_ca}.stk_code,{$this->tables->idx_ca}.idx_code) = CONCAT({$this->tables->idx_composition}.nxt_stk_code,{$this->tables->idx_composition}.idx_code) AND ({$this->tables->idx_ca}.new_shares <> 0 AND {$this->tables->idx_ca}.new_shares IS NOT NULL)
                AND {$this->tables->idx_composition}.nxt_date = {$this->tables->idx_ca}.date;";
        $this->db->simple_query($sql);
        $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->idx_ca}
                SET     {$this->tables->idx_composition}.nxt_float_idx={$this->tables->idx_ca}.nxt_float_idx,
                {$this->tables->idx_composition}.to_adjust = 1
                WHERE CONCAT({$this->tables->idx_ca}.stk_code,{$this->tables->idx_ca}.idx_code) = CONCAT({$this->tables->idx_composition}.nxt_stk_code,{$this->tables->idx_composition}.idx_code) AND ({$this->tables->idx_ca}.nxt_float_idx <> 0 AND {$this->tables->idx_ca}.nxt_float_idx IS NOT NULL)
                AND {$this->tables->idx_composition}.nxt_date = {$this->tables->idx_ca}.date;";
        $this->db->simple_query($sql);
        $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->idx_ca}
                SET     {$this->tables->idx_composition}.nxt_capp_idx={$this->tables->idx_ca}.nxt_capp_idx,
                {$this->tables->idx_composition}.to_adjust = 1
                WHERE CONCAT({$this->tables->idx_ca}.stk_code,{$this->tables->idx_ca}.idx_code) = CONCAT({$this->tables->idx_composition}.nxt_stk_code, {$this->tables->idx_composition}.idx_code) AND ({$this->tables->idx_ca}.nxt_capp_idx <> 0 AND {$this->tables->idx_ca}.nxt_capp_idx IS NOT NULL)
                AND {$this->tables->idx_composition}.nxt_date = {$this->tables->idx_ca}.date;";
        $this->db->simple_query($sql);
        $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->idx_ca}
                SET     {$this->tables->idx_composition}.nxt_price={$this->tables->idx_ca}.adj_close,
                {$this->tables->idx_composition}.to_adjust = 1
                WHERE CONCAT({$this->tables->idx_ca}.stk_code,{$this->tables->idx_ca}.idx_code) = CONCAT({$this->tables->idx_composition}.nxt_stk_code,{$this->tables->idx_composition}.idx_code) AND ({$this->tables->idx_ca}.adj_close <> 0 AND {$this->tables->idx_ca}.adj_close IS NOT NULL)
                AND {$this->tables->idx_composition}.nxt_date = {$this->tables->idx_ca}.date;";
        $this->db->simple_query($sql);
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFromStk_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFromStk_ref($id = "") {
        if ($id == '') {
            $ids2 = array();
            $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM {$this->tables->temp_idx_composition}";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            foreach ($ids as $value) {
                $ids2[] = $value['t'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            $sql = "SELECT id FROM {$this->tables->idx_composition} where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            if (is_array($ids) == TRUE && count($ids) > 0) {
                foreach ($ids as $value) {
                    $ids2[] = $value['id'];
                }
                $ids = implode($ids2, "','");
                unset($ids2);
                $id = $ids;
            }
        }
        if ($id != '') {
            $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->stk_ref}
                SET     {$this->tables->idx_composition}.stk_name={$this->tables->stk_ref}.stk_name,
                        {$this->tables->idx_composition}.stk_curr={$this->tables->stk_ref}.stk_curr,
                        {$this->tables->idx_composition}.stk_mult={$this->tables->stk_ref}.stk_mult
                        WHERE {$this->tables->idx_composition}.stk_code={$this->tables->stk_ref}.stk_code
                        AND
                        {$this->tables->idx_composition}.id IN ('{$id}')";
            $this->db->simple_query($sql);
        }
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFromIdx_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFromIdx_ref($id = "") {
        if ($id == '') {
            $ids2 = array();
            $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM {$this->tables->temp_idx_composition}";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            foreach ($ids as $value) {
                $ids2[] = $value['t'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            $sql = "SELECT id FROM {$this->tables->idx_composition} where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            if (is_array($ids) == TRUE && count($ids) > 0) {
                foreach ($ids as $value) {
                    $ids2[] = $value['id'];
                }
                $ids = implode($ids2, "','");
                unset($ids2);
                $id = $ids;
            }
        }
        if ($id != '') {
            $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->idx_ref}
                    SET     {$this->tables->idx_composition}.idx_curr={$this->tables->idx_ref}.idx_curr
                    WHERE {$this->tables->idx_composition}.idx_code={$this->tables->idx_ref}.idx_code
                    AND {$this->tables->idx_composition}.id IN ('{$id}')";
            $this->db->simple_query($sql);
        }
        /* update: Anh Nguyen 20130527 */
        /* 1: UPDATE NXT_STK_CODE WHERE NXT_DATE = 0 */
        $sql = "UPDATE {$this->tables->idx_composition}
                SET nxt_stk_code = NULL
                WHERE nxt_date = 0;";
        $this->db->simple_query($sql);

        /* 2: UPDATE ADCMP */
        $sql = "UPDATE {$this->tables->idx_composition}
                SET nxt_adjcmp = 1
                WHERE stk_code IS NULL AND nxt_stk_code IS NOT NULL
                OR stk_code IS NOT NULL AND nxt_stk_code IS NULL;";
        $this->db->simple_query($sql);

        /* 3: UPDATE ADJCA */
        $sql = "UPDATE {$this->tables->idx_composition}
                SET nxt_adjca = 1
                WHERE (adjcoeff <> 1 AND nxt_stk_code IS NOT NULL)
                OR (stk_shares_idx <> nxt_shares_idx AND stk_code IS NOT NULL AND nxt_stk_code IS NOT NULL)
                OR (stk_float_idx <> nxt_float_idx AND stk_code IS NOT NULL AND nxt_stk_code IS NOT NULL)
                OR (stk_capp_idx <> nxt_capp_idx AND stk_code IS NOT NULL AND nxt_stk_code IS NOT NULL);";
        $this->db->simple_query($sql);

        /* 4: UPDATE TO_ADJUST */
        $sql = "UPDATE {$this->tables->idx_composition}
                SET to_adjust = 1
                WHERE nxt_adjcmp = 1 OR nxt_adjca = 1;";
        $this->db->simple_query($sql);
        /* end update */
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFromCurr_rates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFromCurr_rates($id = "") { // sai
        if ($id == '') {
            $ids2 = array();
            $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM {$this->tables->temp_idx_composition}";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            foreach ($ids as $value) {
                $ids2[] = $value['t'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            $sql = "SELECT id FROM {$this->tables->idx_composition} where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            if (is_array($ids) == TRUE && count($ids) > 0) {
                foreach ($ids as $value) {
                    $ids2[] = $value['id'];
                }
                $ids = implode($ids2, "','");
                unset($ids2);
                $id = $ids;
            }
        }
        if ($id != '') {
            $sql = "UPDATE {$this->tables->idx_composition},{$this->tables->cur_rates}
                    SET     {$this->tables->idx_composition}.curr_conv={$this->tables->cur_rates}.curr_conv
                    WHERE {$this->tables->idx_composition}.id IN ('{$id}')
                    AND CONCAT({$this->tables->idx_composition}.stk_curr,{$this->tables->idx_composition}.idx_curr) ={$this->tables->cur_rates}.code";
            $this->db->simple_query($sql);
        }
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： calculateNst_curr_convNstk_mcap_idx
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function calculateNst_curr_convNstk_mcap_idx() {
        $sql = "UPDATE {$this->tables->idx_composition}
                SET nstk_curr_conv=nxt_price*curr_conv
                WHERE nxt_date <> '0000-00-00'";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_composition}
                SET nstk_mcap_idx=nxt_shares_idx*(nxt_float_idx/100)*(nxt_capp_idx/100)*(1/stk_mult)*nstk_curr_conv
                WHERE nxt_date <> '0000-00-00'";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： empty_nxt_dateFromIdx_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function empty_nxt_dateFromIdx_specs() {
        $sql = "UPDATE {$this->tables->idx_specs} SET nxt_date =0";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： add_nxt_dateFromIdx_calendar
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function add_nxt_dateFromIdx_calendar() {
        $sql = "UPDATE {$this->tables->idx_specs}
                SET {$this->tables->idx_specs}.nxt_date =(SELECT `value` FROM `setting` WHERE `key`='nxt_date' LIMIT 1)";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： addIdx_specsFromIdx_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function addIdx_specsFromIdx_ref() {
        $sql = "SELECT id FROM {$this->tables->idx_specs}";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        foreach ($ids as $value) {
            $ids2[] = $value['id'];
        }
        $ids = implode($ids2, "','");
        unset($ids2);
        $sql = "INSERT INTO {$this->tables->idx_specs}(idx_code)
                SELECT     {$this->tables->idx_ref}.idx_code
                            FROM {$this->tables->idx_ref}
                WHERE {$this->tables->idx_ref}.idx_start_date = (SELECT nxt_date FROM {$this->tables->idx_specs} LIMIT 1)";
        $this->db->query($sql);
        $sql = "SELECT id FROM {$this->tables->idx_specs} WHERE id NOT IN ('{$ids}') ";
        $query = $this->db->query($sql);
        $ids = $query->result_array();
        if (is_array($ids) == TRUE && count($ids) > 0) {
            foreach ($ids as $value) {
                $ids2[] = $value['id'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            return $ids;
        }
    }

    /*     * ***********************************************************************************************************
     * Name         ： deleteRemoval
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function deleteRemoval() {
//        $sql = "UPDATE {$this->tables->idx_ref},{$this->tables->idx_specs}
//                SET {$this->tables->idx_specs}.nxt_date =0
//                WHERE {$this->tables->idx_ref}.idx_end_date = {$this->tables->idx_specs}.nxt_date
//                AND     {$this->tables->idx_ref}.idx_code={$this->tables->idx_specs}.idx_code";
//        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIdx_specsFromIdx_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIdx_specsFromIdx_ref($id = "") {
        // if ($id == '') {
        //     $ids2 = array();
        //     $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM idx_composition";
        //     $query = $this->db->query($sql);
        //     $ids = $query->result_array();
        //     foreach ($ids as $value) {
        //         $ids2[] = $value['t'];
        //     }
        //     $ids = implode($ids2, "','");
        //     unset($ids2);
        //     $id = $ids;
        //     $sql = "SELECT id FROM idx_composition where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
        //     $query = $this->db->query($sql);
        //     $ids = $query->result_array();
        //     if (is_array($ids) == TRUE && count($ids) > 0) {
        //         foreach ($ids as $value) {
        //             $ids2[] = $value['id'];
        //         }
        //         $ids = implode($ids2, "','");
        //         unset($ids2);
        //         $id = $ids;
        //     }
        // }
        // if ($id != '') {
        // $sql = "UPDATE idx_specs,idx_ref
        //     SET     idx_specs.idx_name=idx_ref.idx_name,
        // idx_specs.idx_curr=idx_ref.idx_curr,
        // idx_specs.idx_base=idx_ref.idx_base,
        // idx_specs.idx_type=idx_ref.idx_type,
        // idx_specs.idx_mother=idx_ref.idx_mother,
        // idx_specs.calculs=idx_ref.calculs,
        // idx_specs.publications=idx_ref.publications,
        // idx_specs.idx_bbs=idx_ref.idx_bbs,
        // idx_specs.idx_last=idx_ref.idx_last,
        // idx_specs.idx_divisor_nxt=idx_ref.idx_divisor_nxt
        // WHERE idx_specs.idx_code=idx_ref.idx_code
        // AND idx_specs.id IN ('{$id}')";
        $sql = "UPDATE {$this->tables->idx_specs}, {$this->tables->idx_ref}
                SET {$this->tables->idx_specs}.idx_name = {$this->tables->idx_ref}.idx_name,
                {$this->tables->idx_specs}.idx_curr = {$this->tables->idx_ref}.idx_curr,
                {$this->tables->idx_specs}.idx_base = {$this->tables->idx_ref}.idx_base,
                {$this->tables->idx_specs}.idx_type = {$this->tables->idx_ref}.idx_type,
                {$this->tables->idx_specs}.idx_mother = {$this->tables->idx_ref}.idx_mother,
                {$this->tables->idx_specs}.calculs = {$this->tables->idx_ref}.calculs,
                {$this->tables->idx_specs}.publications = {$this->tables->idx_ref}.publications,
                {$this->tables->idx_specs}.idx_bbs = {$this->tables->idx_ref}.idx_bbs,
                {$this->tables->idx_specs}.idx_last = {$this->tables->idx_ref}.idx_last,
                {$this->tables->idx_specs}.idx_divisor_nxt = {$this->tables->idx_ref}.idx_divisor_nxt
                WHERE {$this->tables->idx_specs}.idx_code = {$this->tables->idx_ref}.idx_code
                AND {$this->tables->idx_specs}.nxt_date = {$this->tables->idx_ref}.idx_start_date;";
        return $this->db->simple_query($sql);
        // }
        // return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateFromCur_rates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateFromCur_rates($id = "") {
        if ($id == '') {
            $ids2 = array();
            $sql = "SELECT CONCAT(stk_code,idx_code) AS t FROM {$this->tables->temp_idx_composition}";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            foreach ($ids as $value) {
                $ids2[] = $value['t'];
            }
            $ids = implode($ids2, "','");
            unset($ids2);
            $sql = "SELECT id FROM {$this->tables->idx_composition} where CONCAT(stk_code,idx_code) NOT IN ('{$ids}') ";
            $query = $this->db->query($sql);
            $ids = $query->result_array();
            if (is_array($ids) == TRUE && count($ids) > 0) {
                foreach ($ids as $value) {
                    $ids2[] = $value['id'];
                }
                $ids = implode($ids2, "','");
                unset($ids2);
                $id = $ids;
            }
        }
        if ($id != '') {
            $sql = "UPDATE {$this->tables->idx_specs}
                    SET     {$this->tables->idx_specs}.idx_conv =1
                    WHERE    {$this->tables->idx_specs}.idx_code={$this->tables->idx_specs}.idx_mother
                    AND {$this->tables->idx_specs}.id IN ('{$id}')";
            $this->db->simple_query($sql);
            //////////////////////
            $sql = "UPDATE {$this->tables->idx_specs} CR,cur_rates
                    SET         CR.`idx_conv` =cur_rates.curr_conv
                    WHERE    CONCAT(CR.idx_curr,(SELECT DISTINCT idx_curr FROM (SELECT idx_curr,idx_code FROM {$this->tables->idx_specs}) as X WHERE X.idx_code=CR.idx_mother)) =cur_rates.code
                    AND         CR.idx_code != CR.idx_mother
                    AND CR.id IN ('{$id}')";
            $this->db->simple_query($sql);
        }
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateTo_adjustIdx_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateTo_adjustIdx_specs() {
        //        $sql = "UPDATE idx_specs,idx_ca
        //                SET     idx_specs.to_adjust=1
        //                WHERE (SELECT SUM(idx_ca.to_adjust) FROM idx_ca where idx_ca.idx_code =idx_specs.idx_mother) > 0";
        //        return $this->db->simple_query($sql);
        /* update 20130524: Anh Nguyen */
        $sql = "UPDATE `{$this->tables->idx_specs}`,
                (SELECT `idx_code`, SUM(`to_adjust`) AS `sum_to_adjust`, `nxt_date`
                FROM `{$this->tables->idx_composition}`
                GROUP BY `idx_code`, `nxt_date`
                HAVING SUM(`to_adjust`) > 0) AS `temp`
                SET `{$this->tables->idx_specs}`.`to_adjust` = 1
                WHERE `{$this->tables->idx_specs}`.`idx_mother` = `temp`.`idx_code`
                AND `{$this->tables->idx_specs}`.`nxt_date` = `temp`.`nxt_date`;";
        return $this->db->simple_query($sql);
        /* end update */
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIdx_mcap_nxt
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIdx_mcap_nxt() {
        $sql = "UPDATE {$this->tables->idx_specs},{$this->tables->idx_composition}
                SET {$this->tables->idx_specs}.idx_mcap_nxt = (select SUM({$this->tables->idx_composition}.nstk_mcap_idx) from {$this->tables->idx_composition} where {$this->tables->idx_composition}.idx_code={$this->tables->idx_specs}.idx_mother)/idx_conv
                WHERE
                  {$this->tables->idx_specs}.to_adjust > 0
                AND {$this->tables->idx_specs}.date <> '0000-00-00'";
        $this->db->simple_query($sql);

        //        $sql = "UPDATE `idx_specs`
        //                SET `idx_mcap_nxt` = IF(`to_adjust` = 1, `idx_mcap_nxt`, `idx_mcap`);";
        //        $this->db->simple_query($sql);

        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateIdx_divisor_nxt
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateIdx_divisor_nxt() {
        $sql = "UPDATE {$this->tables->idx_specs}
                SET idx_divisor_nxt=idx_divisor*(idx_mcap_nxt/idx_mcap)
                WHERE `date` <> '0000-00-00'";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_specs},
                (SELECT idx_mother, idx_curr, idx_divisor_nxt, to_adjust
                FROM {$this->tables->idx_specs}
                WHERE idx_type = 'P') AS temp
                SET {$this->tables->idx_specs}.idx_divisor_nxt = temp.idx_divisor_nxt,
                {$this->tables->idx_specs}.to_adjust = temp.to_adjust
                WHERE {$this->tables->idx_specs}.idx_mother = temp.idx_mother
                AND {$this->tables->idx_specs}.idx_curr = temp.idx_curr
                AND {$this->tables->idx_specs}.idx_type = 'R';";
        $this->db->simple_query($sql);

        $sql = "UPDATE `{$this->tables->idx_specs}`
                SET `next_divisor_adjust` = IF(`to_adjust` > 0, `idx_divisor_nxt`, `idx_divisor`);";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->tables->idx_specs} SET FINAL_DIVISOR = IF(to_adjust>0, idx_divisor_nxt, idx_divisor);";
        $this->db->query($sql);

        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： empty_nxt_dateFromStk_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function empty_nxt_dateFromStk_prices() {
        $sql = "UPDATE {$this->tables->stk_prices} SET nxt_date=0";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： add_Idx_pricesNxt_dateFromIdx_calendar
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function add_Idx_pricesNxt_dateFromIdx_calendar() {
        $sql = "UPDATE {$this->tables->stk_prices},{$this->tables->idx_calendar}
           SET {$this->tables->stk_prices}.nxt_date =(SELECT `value` FROM `setting` WHERE `key`='nxt_date' LIMIT 1)";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： add_introFromIdx_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function add_introFromIdx_composition() {
        $sql = "INSERT INTO {$this->tables->stk_prices}(stk_code)
                SELECT     {$this->tables->idx_composition}.stk_code
                FROM {$this->tables->idx_composition}
                WHERE {$this->tables->idx_composition}.nxt_date = (SELECT nxt_date FROM {$this->tables->stk_prices} LIMIT 1)
                AND  {$this->tables->idx_composition}.stk_code NOT IN (select X.stk_code FROM {$this->tables->stk_prices} X) GROUP BY stk_code";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： emptystk_pricesRemoval
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function emptystk_pricesRemoval() {
        $sql = "UPDATE {$this->tables->stk_prices}
                SET    nxt_date=0
                WHERE    stk_code NOT IN (SELECT stk_code FROM {$this->tables->idx_composition})";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateStk_pricesFromStk_ref
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateStk_pricesFromStk_ref($id = "") {
        $sql = "UPDATE {$this->tables->stk_prices},{$this->tables->stk_ref}
                SET     {$this->tables->stk_prices}.stk_name={$this->tables->stk_ref}.stk_name,
                        {$this->tables->stk_prices}.stk_market={$this->tables->stk_ref}.stk_market,
                        {$this->tables->stk_prices}.stk_sector={$this->tables->stk_ref}.stk_sector,
                        {$this->tables->stk_prices}.stk_curr={$this->tables->stk_ref}.stk_curr,
                        {$this->tables->stk_prices}.stk_mult={$this->tables->stk_ref}.stk_mult
                WHERE     {$this->tables->stk_prices}.stk_code in ('{$id}')";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateStk_pricesFromStk_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateStk_pricesFromStk_prices() {
        $sql = "UPDATE {$this->tables->stk_prices}
                SET     nxt_stk_rlast={$this->tables->stk_prices}.stk_price
                WHERE {$this->tables->stk_prices}.`date` <> '0000-00-00'";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： updateStk_pricesFromIdx_ca
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function updateStk_pricesFromIdx_ca() {
        $sql = "UPDATE {$this->tables->stk_prices},{$this->tables->idx_ca}
                SET nxt_stk_rlast={$this->tables->idx_ca}.adj_close
                WHERE {$this->tables->stk_prices}.nxt_date={$this->tables->idx_ca}.`date`
                AND {$this->tables->stk_prices}.stk_code={$this->tables->idx_ca}.idx_code";
        return $this->db->simple_query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： getCheckInDate
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function getCheckInDate($column, $table) {
        $this->db->distinct();
        $this->db->select($column);
        $query = $this->db->get($table);
        return $query->result_array();
    }

    /*     * ***********************************************************************************************************
     * Name         ： checkin2CheckIdx_codeStk_codeCurrencies
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function checkin2CheckIdx_codeStk_codeCurrencies() {
        $result = array();
        $result['SETTING']['table'] = 'nxt_date';
        $result['SETTING']['statistic'] = $this->registry->setting['nxt_date'];
        $result['SETTING']['values'] = $this->registry->setting['nxt_date'];
        $result['SETTING']['statement'] = $this->registry->setting['nxt_date'] ? 'OK' : 'WARNING';

        $count_idx_specs = $this->db->count_all('idx_specs');
        $count_idx_ref = $this->db->count_all('idx_ref');
        $sql = "select DISTINCT idx_code from idx_specs where idx_code not in (select idx_code from idx_ref)";
        $query = $this->db->query($sql);
        $num = $query->num_rows();
        $vcode = $query->result();
        $v = array();
        if (is_array($vcode) == TRUE && count($vcode) > 0) {
            foreach ($vcode as $value) {
                if ($value->idx_code != '')
                    $v[] = $value->idx_code;
            }
        }
        $v = implode(',', $v);

        $sql = "select DISTINCT idx_code from idx_compo where idx_code not in (select idx_code from idx_specs)";
        $query = $this->db->query($sql);
        $num_idx_compo_idx_code_not_in_idx_specs = $query->num_rows();
        $vidx_compo_idx_code_not_in_idx_specs = $query->result();
        $idx_compo_idx_code_not_in_idx_specs = array();
        foreach ($vidx_compo_idx_code_not_in_idx_specs as $value) {
            $idx_compo_idx_code_not_in_idx_specs[] = $value->idx_code;
        }
        $idx_compo_idx_code_not_in_idx_specs = implode(',', $idx_compo_idx_code_not_in_idx_specs);


        $sql = "select DISTINCT idx_code from idx_specs where idx_code  in (select idx_code from idx_compo)";
        $query = $this->db->query($sql);
        $num_idx_code_in_idx_compo = $query->num_rows();

        $sql = "SELECT distinct idx_mother FROM `idx_specs`";
        $query = $this->db->query($sql);
        $num_idx_mother_in_idx_specs = $query->num_rows();

        $result['idx_code']['table'] = 'idx_code';
        $result['idx_code']['statistic'] = "<strong>NB idx_code in idx_specs :</strong>  <br/>";
        $result['idx_code']['statistic'].= "<strong>NB idx_code in idx_ref : </strong> <br/>";
        $result['idx_code']['statistic'].= "<strong>idx_code not in idx_ref : </strong><br/>";
        $result['idx_code']['statistic'].= "<strong>idx_compo.idx_code not in idx_specs :  </strong><br/>";
        $result['idx_code']['statistic'].="<strong>number idx_code in idx_compo : </strong><br/>";
        $result['idx_code']['statistic'].="<strong>number idx_mother in idx_specs : </strong><br/>";

        $result['idx_code']['values'] = "{$count_idx_specs} <br/>";
        $result['idx_code']['values'].= "{$count_idx_ref} <br/>";
        $result['idx_code']['values'].= "{$v}<br/>";
        $result['idx_code']['values'].= "{$num_idx_compo_idx_code_not_in_idx_specs} {$idx_compo_idx_code_not_in_idx_specs}<br/>";
        $result['idx_code']['values'].="{$num_idx_code_in_idx_compo}<br/>";
        $result['idx_code']['values'].="{$num_idx_mother_in_idx_specs} <br/>";

        $result['idx_code']['statement'] = ( $count_idx_specs > 0 ? 'ok' : 'warning' ) . '<br/>';
        $result['idx_code']['statement'].=( $count_idx_ref > 0 ? 'ok' : 'warning' ) . '<br/>';

        //////////////////////////////////////////////////////////////
        $count_idx_compo = $this->db->count_all('idx_compo');
        $count_stk_ref = $this->db->count_all('stk_ref');
        $count_stk_prices = $this->db->count_all('stk_prices');
        $count_stk_feed = $this->db->count_all('stk_feed');
        $count_mar_ref = $this->db->count_all('mar_ref');
        $count_sec_ref = $this->db->count_all('sec_ref');
        $count_stk_div = $this->db->count_all('stk_div');


        $sql = "select DISTINCT stk_code from idx_compo where stk_code not in (select stk_code from stk_ref)";
        $query = $this->db->query($sql);
        $num1 = $query->num_rows();
        $vcodenum1 = $query->result();
        $vnum1 = array();
        if (is_array($vcodenum1) == TRUE && count($vcodenum1) > 0) {
            foreach ($vcodenum1 as $value) {
                if ($value->stk_code != '')
                    $vnum1[] = $value->stk_code;
            }
        }
        $vnum1 = implode(',', $vnum1);

        $sql = "select distinct stk_code from idx_compo";
        $query = $this->db->query($sql);
        $stk_code_unique_in_idx_compo = $query->num_rows();

        $sql = "select DISTINCT stk_code from idx_compo where stk_code not in (select stk_code from stk_prices)";
        $query = $this->db->query($sql);
        $num2 = $query->num_rows();

        $vcodenum2 = $query->result();
        $vnum2 = array();
        if (is_array($vcodenum2) == TRUE && count($vcodenum2) > 0) {
            foreach ($vcodenum2 as $value) {
                if ($value->stk_code != '')
                    $vnum2[] = $value->stk_code;
            }
        }
        $vnum2 = implode(',', $vnum2);

        $sql = "select DISTINCT stk_code from idx_compo where stk_code not in (select stk_code from stk_feed)";
        $query = $this->db->query($sql);
        $num3 = $query->num_rows();

        $vcodenum3 = $query->result();
        $vnum3 = array();
        if (is_array($vcodenum3) == TRUE && count($vcodenum3) > 0) {
            foreach ($vcodenum3 as $value) {
                if ($value->stk_code)
                    $vnum3[] = $value->stk_code;
            }
        }
        $vnum3 = implode(',', $vnum3);

        $sql = "select DISTINCT stk_market from stk_prices where stk_market not in (select mar_code from mar_ref)";
        $query = $this->db->query($sql);
        $num4 = $query->num_rows();

        $vcodenum4 = $query->result();
        $vnum4 = array();
        if (is_array($vcodenum4) == TRUE && count($vcodenum4) > 0) {
            foreach ($vcodenum4 as $value) {
                if ($value->stk_market != '')
                    $vnum4[] = $value->stk_market;
            }
        }
        $vnum4 = implode(',', $vnum4);

        $sql = "select DISTINCT stk_sector from stk_prices where stk_sector not in (select sec_code from sec_ref)";
        $query = $this->db->query($sql);
        $num5 = $query->num_rows();

        $vcodenum5 = $query->result();
        $vnum5 = array();
        if (is_array($vcodenum5) == TRUE && count($vcodenum5) > 0) {
            foreach ($vcodenum5 as $value) {
                if ($value->stk_sector != '')
                    $vnum5[] = $value->stk_sector;
            }
        }
        $vnum5 = implode(',', $vnum5);

        $sql = "select DISTINCT stk_code from stk_div where stk_code not in (select stk_code from idx_compo)";
        $query = $this->db->query($sql);
        $num6 = $query->num_rows();

        $vcodenum6 = $query->result();
        $vnum6 = array();
        if (is_array($vcodenum6) == TRUE && count($vcodenum6) > 0) {
            foreach ($vcodenum6 as $value) {
                if ($value->stk_code != '')
                    $vnum6[] = $value->stk_code;
            }
        }
        $vnum6 = implode(',', $vnum6);

        $result['stk_code']['table'] = 'stk_code';
        $result['stk_code']['statistic'] = "<strong>idx_compo : </strong> <br/>";
        $result['stk_code']['statistic'].="<strong>STK_CODE UNIQUE IN IDX_COMPO : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_ref : </strong> <br/>";
        $result['stk_code']['statistic'].="<strong>stk_prices :</strong>  <br/>";
        $result['stk_code']['statistic'].="<strong>stk_feed : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>mar_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>sec_ref : </strong> <br/>";
        $result['stk_code']['statistic'].="<strong>stk_div : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>idx_compo.stk_code not in stk_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>idx_compo.stk_code not in stk_prices :</strong><br/>";
        $result['stk_code']['statistic'].="<strong>idx_compo.stk_code not in stk_feed : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_prices.stk_market not in mar_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_prices.stk_sector not in sec_ref : </strong><br/>";
        $result['stk_code']['statistic'].="<strong>stk_div.stk_code not in idx_compo :</strong><br/>";


        $result['stk_code']['values'] = "{$count_idx_compo} <br/>";
        $result['stk_code']['values'].="{$stk_code_unique_in_idx_compo}<br/>";
        $result['stk_code']['values'].="{$count_stk_ref} <br/>";
        $result['stk_code']['values'].=" {$count_stk_prices} <br/>";
        $result['stk_code']['values'].="{$count_stk_feed} <br/>";
        $result['stk_code']['values'].="{$count_mar_ref} <br/>";
        $result['stk_code']['values'].="{$count_sec_ref} <br/>";
        $result['stk_code']['values'].="{$count_stk_div} <br/>";
        $result['stk_code']['values'].="{$num1} {$vnum1}<br/>";
        $result['stk_code']['values'].="{$num2} {$vnum2}<br/>";
        $result['stk_code']['values'].="{$num3} {$vnum3}<br/>";
        $result['stk_code']['values'].="{$num4} {$vnum4}<br/>";
        $result['stk_code']['values'].="{$num5} {$vnum5}<br/>";
        $result['stk_code']['values'].="{$num6} {$vnum6}<br/>";



        $result['stk_code']['statement'] = ( $count_idx_compo > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $stk_code_unique_in_idx_compo > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $count_stk_ref > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $count_stk_prices > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $count_stk_feed > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $count_mar_ref > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $count_sec_ref > 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $count_stk_div > 0 ? 'OK' : 'WARNING' ) . '<br/>';

        $result['stk_code']['statement'].=( $num1 == 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $num2 == 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $num3 == 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $num4 == 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $num5 == 0 ? 'OK' : 'WARNING' ) . '<br/>';
        $result['stk_code']['statement'].=( $num6 == 0 ? 'OK' : 'WARNING' ) . '<br/>';


        $sql = "select DISTINCT stk_ref.stk_curr from stk_ref, idx_ca where idx_ca.stk_code=stk_ref.stk_code";
        $query = $this->db->query($sql);
        $v1 = $query->result();
        $sql = "select DISTINCT idx_ref.idx_curr from idx_ref,idx_ca where idx_ca.idx_code=idx_ref.idx_mother";
        $query = $this->db->query($sql);
        $v2 = $query->result();

        $v3 = array();
        if (is_array($v1) == TRUE && is_array($v2) == TRUE) {
            foreach ($v1 as $value1) {
                foreach ($v2 as $value2) {
                    $v3[] = $value2->idx_curr . $value1->stk_curr;
                }
            }
        }
        $v3 = array_unique($v3);
        $sql = "select DISTINCT `code` from cur_rates";
        $query = $this->db->query($sql);
        $vcode = $query->result();
        foreach ($vcode as $value3) {
            $v4[] = $value3->code;
        }

        if (is_array($v3) == TRUE && is_array($v4) == TRUE) {
            $v5 = array_diff($v3, $v4);
        }
        $count_v5 = count($v5);

        $sql = "SELECT DISTINCT  CONCAT(CR.idx_curr,(SELECT idx_curr FROM (SELECT idx_curr,idx_code FROM idx_specs) as X WHERE X.idx_code=CR.idx_mother AND CR.idx_mother <> '')) AS `code`
FROM idx_specs CR";
        $query = $this->db->query($sql);
        $v6 = $query->result();
        $v62 = array();
        foreach ($v6 as $value3) {
            $v62[] = $value3->code;
        }
        $v6 = $v62;
        $v7 = array();
        if (is_array($v6) == TRUE && is_array($v4) == TRUE) {
            $v7 = array_diff($v6, $v4);
        }
        $count_v7 = count($v7);

        $result['currency']['table'] = 'currency';
        $result['currency']['statistic'] = "<strong>NB STK_CURR+IDX_CURR not in cur_rates :</strong> <br/>";
        $result['currency']['statistic'].="<strong>NB idx_specs.idx_curr not in cur_rates :</strong> <br/>";
        $result['currency']['values'] = "{$count_v5} " . implode(',', $v5) . " <br/>";
        $result['currency']['values'].="{$count_v7} " . implode(',', $v7) . " <br/>";
        if ($count_v5 > 0 || $count_v7 > 0) {
            $result['currency']['statement'] = 'WARNING';
        }


        $sql = "SELECT DISTINCT stk_code from stk_ref where stk_curr='' or stk_curr IS NULL or stk_mult='' or stk_mult IS NULL";
        $query = $this->db->query($sql);
        $numstk_codeNULL = $query->num_rows();

        $vcodestk_codeNULL = $query->result();
        $vcodestk_codeNULLs = array();
        if (is_array($vcodestk_codeNULL) == TRUE && count($vcodestk_codeNULL) > 0) {
            foreach ($vcodestk_codeNULL as $value) {
                if ($value->stk_code != '')
                    $vcodestk_codeNULLs[] = $value->stk_code;
            }
        }
        $vcodestk_codeNULLs = implode(',', $vcodestk_codeNULLs);

        $sql = "SELECT DISTINCT idx_code from idx_ref where idx_curr='' or idx_curr IS NULL or idx_base='' or idx_base IS NULL";
        $query = $this->db->query($sql);
        $numidx_codeNULL = $query->num_rows();

        $vcodeidx_codeNULL = $query->result();
        $vcodeidx_codeNULLs = array();
        if (is_array($vcodeidx_codeNULL) == TRUE && count($vcodeidx_codeNULL) > 0) {
            foreach ($vcodeidx_codeNULL as $value) {
                if ($value->idx_code != '')
                    $vcodeidx_codeNULLs[] = $value->idx_code;
            }
        }
        $vcodeidx_codeNULLs = implode(',', $vcodeidx_codeNULLs);

        $sql = "SELECT * from cur_rates where `code`='' or `code` IS NULL or `currency`='' or `currency` IS NULL or `tos`='' or `tos` IS NULL or `date`='' or `date` IS NULL or `time`='' or `time` IS NULL";
        $query = $this->db->query($sql);
        $numcur_ratesNULL = $query->num_rows();

        $sql = "SELECT DISTINCT `code` FROM `cur_rates` WHERE `curr_conv` <=0 or `curr_conv` IS NULL";
        $query = $this->db->query($sql);
        $numcurr_convNULL = $query->num_rows();

        $vcodecurr_convNULL = $query->result();
        $vcodecurr_convNULLs = array();
        if (is_array($vcodecurr_convNULL) == TRUE && count($vcodecurr_convNULL) > 0) {
            foreach ($vcodecurr_convNULL as $value) {
                if ($value->code != '')
                    $vcodecurr_convNULLs[] = $value->code;
            }
        }
        $vcodecurr_convNULLs = implode(',', $vcodecurr_convNULLs);

        $sql = "SELECT DISTINCT `stk_code` FROM `stk_prices` WHERE `stk_rlast` < 0 or `stk_rlast` IS NULL";
        $query = $this->db->query($sql);
        $numstk_rlastNULL = $query->num_rows();
        $vcodestk_rlastNULL = $query->result();
        $vcodestk_rlastNULLs = array();
        if (is_array($vcodestk_rlastNULL) == TRUE && count($vcodestk_rlastNULL) > 0) {
            foreach ($vcodestk_rlastNULL as $value) {
                if ($value->stk_code != '')
                    $vcodestk_rlastNULLs[] = $value->stk_code;
            }
        }
        $vcodestk_rlastNULLs = implode(',', $vcodestk_rlastNULLs);

        $sql = "SELECT DISTINCT `stk_code` FROM `idx_compo` WHERE `stk_shares_idx` < 0 or `stk_shares_idx` IS NULL";
        $query = $this->db->query($sql);
        $numstk_shares_idxNULL = $query->num_rows();

        $vcodestk_shares_idxNULL = $query->result();
        $vcodestk_shares_idxNULLs = array();
        if (is_array($vcodestk_shares_idxNULL) == TRUE && count($vcodestk_shares_idxNULL) > 0) {
            foreach ($vcodestk_shares_idxNULL as $value) {
                if ($value->stk_code != '')
                    $vcodestk_shares_idxNULLs[] = $value->stk_code;
            }
        }
        $vcodestk_shares_idxNULLs = implode(',', $vcodestk_shares_idxNULLs);

        $sql = "SELECT DISTINCT `stk_code` FROM `idx_compo` WHERE `stk_float_idx` < 0 or `stk_float_idx` > 100 or `stk_float_idx` IS NULL";
        $query = $this->db->query($sql);
        $numstk_float_idx = $query->num_rows();

        $vcodestk_float_idx = $query->result();
        $vcodestk_float_idxs = array();
        if (is_array($vcodestk_float_idx) == TRUE && count($vcodestk_float_idx) > 0) {
            foreach ($vcodestk_float_idx as $value) {
                if ($value->stk_code != '')
                    $vcodestk_float_idxs[] = $value->stk_code;
            }
        }
        $vcodestk_float_idxs = implode(',', $vcodestk_float_idxs);

        $sql = "SELECT DISTINCT `stk_code` FROM `idx_compo` WHERE `stk_capp_idx` < 0 or `stk_capp_idx` > 100 or `stk_capp_idx` IS NULL";
        $query = $this->db->query($sql);
        $numstk_capp_idx = $query->num_rows();

        $vcodestk_capp_idx = $query->result();
        $vcodestk_capp_idxs = array();
        if (is_array($vcodestk_capp_idx) == TRUE && count($vcodestk_capp_idx) > 0) {
            foreach ($vcodestk_capp_idx as $value) {
                if ($value->stk_code != '')
                    $vcodestk_capp_idxs[] = $value->stk_code;
            }
        }
        $vcodestk_capp_idxs = implode(',', $vcodestk_capp_idxs);

        $result['value']['table'] = 'value';

        $result['value']['statistic'] = "<strong>NB STK_REF: STK_CURR, STK_MULT  NULL : </strong><br/>";
        $result['value']['statistic'].="<strong>IDX_REF: IDX_CURR, IDX_BASE  NULL : </strong><br/>";
        $result['value']['statistic'].="<strong>CODE, CURRENCY, TOS, DATE, TIME  NULL :</strong><br/>";
        $result['value']['statistic'].="<strong>CURR_CONV < 0 :</strong><br/>";
        $result['value']['statistic'].="<strong>STK_PRICES: STK_RLAST < 0 : </strong><br/>";
        $result['value']['statistic'].="<strong>IDX_COMPO  STK_SHARES_IDX < 0 : </strong><br/>";
        $result['value']['statistic'].="<strong>STK_FLOAT_IDX <> [0,100] :</strong><br/>";
        $result['value']['statistic'].="<strong>STK_CAPP_IDX <>  [0,100] :</strong>";


        $result['value']['values'] = "{$numstk_codeNULL} {$vcodestk_codeNULLs}<br/>";
        $result['value']['values'].="{$numidx_codeNULL} {$vcodeidx_codeNULLs}<br/>";
        $result['value']['values'].="{$numcur_ratesNULL} <br/>";
        $result['value']['values'].="{$numcurr_convNULL} {$vcodecurr_convNULLs}<br/>";
        $result['value']['values'].="{$numstk_rlastNULL} {$vcodestk_rlastNULLs}<br/>";
        $result['value']['values'].="{$numstk_shares_idxNULL} {$vcodestk_shares_idxNULLs}<br/>";
        $result['value']['values'].="{$numstk_float_idx} {$vcodestk_float_idxs}<br/>";
        $result['value']['values'].="{$numstk_capp_idx} {$vcodestk_capp_idxs}";


        $result['value']['statement'] = ( $numstk_codeNULL > 0 ? 'WARNING' : 'OK' ) . '<br/>';
        $result['value']['statement'].=( $numidx_codeNULL > 0 ? 'WARNING' : 'OK' ) . '<br/>';
        $result['value']['statement'].=( $numcur_ratesNULL > 0 ? 'WARNING' : 'OK' ) . ' <br/>';
        $result['value']['statement'].=( $numcurr_convNULL > 0 ? 'WARNING' : 'OK' ) . '<br/>';
        $result['value']['statement'].=( $numstk_rlastNULL > 0 ? 'WARNING' : 'OK' ) . '<br/>';
        $result['value']['statement'].=( $numstk_shares_idxNULL > 0 ? 'WARNING' : 'OK' ) . ' <br/>';
        $result['value']['statement'].=( $numstk_float_idx > 0 ? 'WARNING' : 'OK' ) . '<br/>';
        $result['value']['statement'].=( $numstk_capp_idx > 0 ? 'WARNING' : 'OK' );
        return $result;
    }

    /*     * ----------------------------------------------------------------------------------------------------------------
     *  statistic */
    /*     * ***********************************************************************************************************
     * Name         ： preparation_when_sequence_0
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function preparation_when_sequence_0() {
        $sql = "set @@max_heap_table_size=1677721600;

DELETE
FROM idx_stats_histoday
WHERE date = (SELECT date FROM idx_specs WHERE !ISNULL(idx_last) LIMIT 1)
OR date > (SELECT date FROM idx_specs LIMIT 1);

TRUNCATE TABLE idx_stats;

INSERT INTO idx_stats(`time`,`date`,idx_code,idx_pclose,idx_last,idx_divisor,idx_mcap,idx_close)
                SELECT  `time`,`date`,idx_code,idx_pclose,idx_last,idx_divisor,idx_mcap,idx_pclose
                FROM  idx_specs;

drop temporary table if exists idx_stats_histoday_tmp;

create temporary table idx_stats_histoday_tmp engine=memory 
                SELECT 
                    idx_stats_histoday.idx_close,
                    idx_stats_histoday.idx_high,
                    idx_stats_histoday.idx_low,
                    idx_stats_histoday.`date`,
                    idx_stats_histoday.idx_code
                FROM idx_stats,idx_stats_histoday
                WHERE idx_stats_histoday.idx_code=idx_stats.idx_code;
ALTER TABLE  `idx_stats_histoday_tmp` ADD INDEX  `date` (`date`);
ALTER TABLE  `idx_stats_histoday_tmp` ADD INDEX  `idxcode` (`idx_code`);
ALTER TABLE  `idx_stats_histoday_tmp` ADD INDEX  `idxcodedate` (`idx_code` ,`date`);
ALTER TABLE  `idx_stats_histoday_tmp` ADD INDEX  `idxcodedateidx_close` (`idx_code` ,`date`,`idx_close`);

UPDATE  idx_stats stats SET
                wtd_date=(SELECT `idx_stats_histoday`.`date` FROM `idx_stats_histoday` WHERE `idx_stats_histoday`.`date` >= stats.`date` - INTERVAL DAYOFWEEK(stats.`date`)+6 DAY AND `idx_stats_histoday`.`date` < stats.`date` - INTERVAL DAYOFWEEK(stats.`date`)-1 DAY AND idx_stats_histoday.idx_code=stats.idx_code ORDER BY idx_stats_histoday.`date` DESC limit 1),
                mtd_date=(SELECT `idx_stats_histoday`.`date` FROM `idx_stats_histoday` WHERE MONTH(`idx_stats_histoday`.`date`) = MONTH(stats.`date`)-1 AND YEAR(`idx_stats_histoday`.`date`)=YEAR(stats.`date`) AND idx_stats_histoday.idx_code=stats.idx_code ORDER BY idx_stats_histoday.`date` DESC limit 1),
                ytd_date=(SELECT `idx_stats_histoday`.`date` FROM `idx_stats_histoday` WHERE YEAR(`idx_stats_histoday`.`date`)=YEAR(stats.`date`)-1 AND idx_stats_histoday.idx_code=stats.idx_code ORDER BY idx_stats_histoday.`date` DESC limit 1),
                y1td_date=(SELECT `idx_stats_histoday`.`date` FROM `idx_stats_histoday` WHERE `idx_stats_histoday`.date <= DATE_SUB(stats.`date`, INTERVAL 1 YEAR) AND idx_stats_histoday.idx_code=stats.idx_code ORDER BY idx_stats_histoday.`date` DESC limit 1),
                ltd_date=(SELECT idx_dtbase FROM idx_ref WHERE stats.idx_code=idx_ref.idx_code);

UPDATE idx_stats xx,idx_stats_histoday_tmp tt
SET xx.wtd_value=tt.idx_close
                WHERE tt.idx_code=xx.idx_code
                AND xx.wtd_date=tt.`date`;

UPDATE idx_stats xx,idx_stats_histoday_tmp tt
SET xx.mtd_value=tt.idx_close
                WHERE tt.idx_code=xx.idx_code
                AND xx.mtd_date=tt.`date`;

UPDATE idx_stats xx,idx_stats_histoday_tmp tt
SET xx.ytd_value=tt.idx_close
                WHERE tt.idx_code=xx.idx_code
                AND xx.ytd_date=tt.`date`;

UPDATE idx_stats xx,idx_stats_histoday_tmp tt
SET xx.y1td_value=tt.idx_close
                WHERE tt.idx_code=xx.idx_code
                AND xx.y1td_date=tt.`date`;

UPDATE idx_stats xx,idx_stats_histoday_tmp tt 
SET xx.ltd_value=tt.idx_close
                WHERE tt.idx_code=xx.idx_code
                AND xx.ltd_date=tt.`date`;

UPDATE idx_stats
                SET idx_stats.ltd_high=(SELECT tt.idx_high
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` >= idx_stats.ltd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC limit 1);

UPDATE idx_stats
                SET idx_stats.ltd_dhigh=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` >= idx_stats.ltd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC,tt.`date` ASC LIMIT 1);

UPDATE idx_stats
                SET idx_stats.ltd_low=(SELECT tt.idx_low
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` >= idx_stats.ltd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC limit 1);

UPDATE idx_stats
                SET idx_stats.ltd_dlow=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` >= idx_stats.ltd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC,tt.`date` ASC LIMIT 1);

UPDATE idx_stats
                SET idx_stats.mtd_high=(SELECT tt.idx_high
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.mtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC limit 1);

UPDATE idx_stats
                SET idx_stats.mtd_dhigh=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.mtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC,tt.`date` ASC LIMIT 1);

UPDATE idx_stats
                SET idx_stats.mtd_low=(SELECT tt.idx_low
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.mtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC limit 1);

UPDATE idx_stats
                SET idx_stats.mtd_dlow=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.mtd_date  AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC,tt.`date` ASC LIMIT 1);

UPDATE idx_stats
                SET idx_stats.wtd_high=(SELECT tt.idx_high
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.wtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC limit 1);

UPDATE idx_stats
                SET idx_stats.wtd_dhigh=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.wtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC,tt.`date` ASC LIMIT 1);

UPDATE idx_stats
                SET idx_stats.wtd_low=(SELECT tt.idx_low
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.wtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC limit 1);

UPDATE idx_stats
                SET idx_stats.wtd_dlow=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.wtd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC,tt.`date` ASC LIMIT 1);

-- y1td
UPDATE idx_stats
                SET idx_stats.y1td_high=(SELECT tt.idx_high
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
								AND ((tt.`date` > idx_stats.y1td_date AND DAY(idx_stats.y1td_date) = DAY(idx_stats.date)) OR tt.`date` >= idx_stats.y1td_date)
								AND tt.`date`<= idx_stats.`date`
								ORDER BY tt.idx_high DESC
								LIMIT 1);

UPDATE idx_stats
                SET idx_stats.y1td_dhigh=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
								AND ((tt.`date` > idx_stats.y1td_date AND DAY(idx_stats.y1td_date) = DAY(idx_stats.date)) OR tt.`date` >= idx_stats.y1td_date)
								AND tt.`date`<= idx_stats.`date`
								ORDER BY tt.idx_high DESC, tt.`date` ASC
								LIMIT 1);

UPDATE idx_stats
                SET idx_stats.y1td_low=(SELECT MIN(tt.idx_low)
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
								AND ((tt.`date` > idx_stats.y1td_date AND DAY(idx_stats.y1td_date) = DAY(idx_stats.date)) OR tt.`date` >= idx_stats.y1td_date)
								AND tt.`date`<= idx_stats.`date`
								ORDER BY tt.`date` ASC
								LIMIT 1);

UPDATE idx_stats
                SET idx_stats.y1td_dlow=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
								AND ((tt.`date` > idx_stats.y1td_date AND DAY(idx_stats.y1td_date) = DAY(idx_stats.date)) OR tt.`date` >= idx_stats.y1td_date)
								AND tt.`date`<= idx_stats.`date`
								ORDER BY tt.idx_low ASC, tt.`date` ASC
								LIMIT 1);

-- end y1td

UPDATE idx_stats
                SET idx_stats.ytd_high=(SELECT MAX(tt.idx_high)
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.ytd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.`date` ASC);

UPDATE idx_stats
                SET idx_stats.ytd_dhigh=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.ytd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_high DESC,tt.`date` ASC LIMIT 1);

UPDATE idx_stats
                SET idx_stats.ytd_low=(SELECT MIN(tt.idx_low)
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.ytd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.`date` ASC);

UPDATE idx_stats
                SET idx_stats.ytd_dlow=(SELECT tt.`date`
                FROM idx_stats_histoday_tmp tt
                WHERE tt.idx_code=idx_stats.idx_code
                AND tt.`date` > idx_stats.ytd_date AND tt.`date`<= idx_stats.`date` ORDER BY tt.idx_low ASC,tt.`date` ASC LIMIT 1);

drop temporary table if exists idx_stats_histoday_tmp;

-- IDX_DAY =====================================
DROP TABLE IF EXISTS idx_day;
create table  idx_day select date,close as open, close as high, close as low, close, close as volume, close as adjclose, idx_code as code, close as perform, 'IFRC' as provider from vndb_index_vnx_daily order by idx_code,date asc;
update idx_day set volume= null,adjclose= null,perform=null;
ALTER TABLE idx_day
ADD  INDEX codedate USING BTREE (code, date);

SET @runtot = 0;
SET @runtot1 = 0;
SET @plr = NULL;
SET @plr1 = NULL;

DROP TABLE IF EXISTS tmp;
CREATE TABLE tmp
SELECT  
 code, date,close,
IF(@plr = code,(@runtot :=  ((a.close/ @runtot)-1)*100),null) AS perform,
(@runtot := a.close ) p,
(@runtot1 := a.close ) p1,
@plr := code AS dummy,
@plr1 := code AS dummy1
FROM    
 idx_day a,(SELECT @runtot:=0, @runtot1:=0) c ;
ALTER TABLE tmp
ADD  INDEX codedate USING BTREE (code, date);


UPDATE idx_day A, tmp B SET A.PERFORM = B.perform WHERE A.code = B.code AND A.DATE = B.DATE;


-- IDX_MONTH ================================================================
DROP TABLE if EXISTS tmp_day_close;
CREATE TEMPORARY TABLE tmp_day_close (select date, code, open, close, perform, provider, LEFT(date,7) as yyyymm from idx_day order by code, date DESC) ;

DROP TABLE if EXISTS tmp_month;
CREATE TEMPORARY TABLE tmp_month (select date, open, max(close) as high, min(close) as low, close, code, provider, 
LEFT(date,7) as yyyymm, 100*(EXP(SUM(LOG(1+(perform/100))))-1) AS perform 
from tmp_day_close group by code, yyyymm);
ALTER TABLE tmp_month
ADD  INDEX codeyyyy USING BTREE (code, yyyymm);
select * from tmp_month;

DROP TABLE if EXISTS tmp_day_open;
CREATE TEMPORARY TABLE tmp_day_open (select date, code, open, LEFT(date,7) as yyyymm from idx_day order by code, date ASC) ;
DROP TABLE if EXISTS tmp_month_open;
CREATE TEMPORARY TABLE tmp_month_open (select date, open,code, provider, LEFT(date,7) as yyyymm 
from idx_day group by code, yyyymm);

ALTER TABLE tmp_month_open
ADD  INDEX codeyyyy USING BTREE (code, yyyymm);
-- select * from tmp_month_open;
-- select * from tmp_month;

UPdate tmp_month, tmp_month_open SET tmp_month.open = tmp_month_open.open 
where tmp_month.code = tmp_month_open.code and tmp_month.yyyymm = tmp_month_open.yyyymm;
DROP TABLE if EXISTS idx_month;
create table idx_month like idx_day;
insert into idx_month(date, open, high, low, `close`, `code`,perform, provider)
select date,open, high,low, close, code, perform,provider from tmp_month;

-- IDX_year ================================================================
DROP TABLE if EXISTS tmp_day_close;
CREATE TEMPORARY TABLE tmp_day_close (select date, code, open, close, perform, provider, LEFT(date,4) as yyyy from idx_day order by code, date DESC) ;

DROP TABLE if EXISTS tmp_year;
CREATE TEMPORARY TABLE tmp_year (select date, open, max(close) as high, min(close) as low, close, code, provider, 
LEFT(date,4) as yyyy, 100*(EXP(SUM(LOG(1+(perform/100))))-1) AS perform 
from tmp_day_close group by code, yyyy);
ALTER TABLE tmp_year
ADD  INDEX codeyyyy USING BTREE (code, yyyy);
-- select * from tmp_year;

DROP TABLE if EXISTS tmp_day_open;
CREATE TEMPORARY TABLE tmp_day_open (select date, code, open, LEFT(date,4) as yyyy from idx_day order by code, date ASC) ;
DROP TABLE if EXISTS tmp_year_open;
CREATE TEMPORARY TABLE tmp_year_open (select date, open,code, provider, LEFT(date,4) as yyyy 
from idx_day group by code, yyyy);

ALTER TABLE tmp_year_open
ADD  INDEX codeyyyy USING BTREE (code, yyyy);
-- select * from tmp_year_open;
-- select * from tmp_year;

UPdate tmp_year, tmp_year_open SET tmp_year.open = tmp_year_open.open 
where tmp_year.code = tmp_year_open.code and tmp_year.yyyy = tmp_year_open.yyyy;

DROP TABLE if EXISTS idx_year;
create table idx_year like idx_day;
insert into idx_year(date, open, high, low, `close`, `code`,perform, provider)
select date,open, high,low, close, code, perform,provider from tmp_year";
        $list_query = explode(";", $sql);
        foreach ($list_query as $item) {
            if ($this->db->query($item) == FALSE) {
                return $this->db->_error_message();
            }
        }
        unset($list_query);
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： statistic_when_sequence_other_0
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function statistic_when_sequence_other_0() {
        $sql = "UPDATE idx_stats,idx_specs SET
                idx_stats.time=idx_specs.time,
                idx_stats.date=idx_specs.date,
                idx_stats.idx_plast=idx_specs.idx_plast
                WHERE idx_stats.idx_code=idx_specs.idx_code;

drop temporary table if exists idx_stats_tmp;

create temporary table idx_stats_tmp engine=memory SELECT idx_code,idx_last FROM idx_stats;

UPDATE idx_stats,idx_specs SET
                        idx_stats.idx_last=idx_specs.idx_last
                WHERE idx_stats.idx_code=idx_specs.idx_code;

drop temporary table if exists idx_stats_last_tmp;

create temporary table idx_stats_last_tmp engine=memory (select idx_stats.idx_code from idx_stats,idx_stats_tmp where idx_stats.idx_last <> idx_stats_tmp.idx_last and idx_stats.idx_code=idx_stats_tmp.idx_code);

drop temporary table if exists idx_stats_tmp;

UPDATE idx_stats
                SET idx_high = greatest(idx_last, idx_high),
                idx_low = least(idx_last, idx_low),
                idx_change = idx_last - idx_plast,
                idx_dchange = idx_last - idx_pclose,
                idx_var = 100 * idx_change / idx_plast,
                idx_dvar = 100 * idx_dchange / idx_pclose,
                ltd_high = greatest(idx_last, ltd_high),
                ltd_low = least(idx_last, ltd_low),
                mtd_high = greatest(idx_last, mtd_high),
                mtd_low = least(idx_last, mtd_low),
                wtd_high = greatest(idx_last, wtd_high),
                wtd_low = least(idx_last, wtd_low),
                ytd_high = greatest(idx_last, ytd_high),
                ytd_low = least(idx_last, ytd_low),
                y1td_high = greatest(idx_last, y1td_high),
                y1td_low = least(idx_last, y1td_low),
                wtd_change=idx_last-wtd_value,
                mtd_change=idx_last-mtd_value,
                ytd_change=idx_last-ytd_value,
                y1td_change=idx_last-y1td_value,
                ltd_change=idx_last-ltd_value,
                wtd_var= 100 * wtd_change/wtd_value,
                mtd_var= 100 * mtd_change/mtd_value,
                ytd_var= 100 * ytd_change/ytd_value,
                y1td_var= 100 * y1td_change/y1td_value,
                ltd_var= 100 * ltd_change/ltd_value;

UPDATE idx_stats SET idx_stats.idx_hhigh=idx_stats.time
                WHERE idx_stats.idx_last >= idx_stats.idx_high
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.idx_hlow =idx_stats.time
                WHERE idx_stats.idx_last <= idx_stats.idx_low
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.ltd_dhigh=idx_stats.`date`
                WHERE idx_stats.idx_last > idx_stats.ltd_high
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.ltd_dlow=idx_stats.`date`
                WHERE idx_stats.idx_last < idx_stats.ltd_low
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.mtd_dhigh=idx_stats.`date`
                WHERE idx_stats.idx_last > idx_stats.mtd_high
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.mtd_dlow=idx_stats.`date`
                WHERE idx_stats.idx_last < idx_stats.mtd_low
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.wtd_dhigh=idx_stats.`date`
                WHERE idx_stats.idx_last > idx_stats.wtd_high
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.wtd_dlow=idx_stats.`date`
                WHERE idx_stats.idx_last < idx_stats.wtd_low
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.y1td_dhigh=idx_stats.`date`
                WHERE idx_stats.idx_last > idx_stats.y1td_high
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.y1td_dlow=idx_stats.`date`
                WHERE idx_stats.idx_last < idx_stats.y1td_low
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.ytd_dhigh=idx_stats.`date`
                WHERE idx_stats.idx_last > idx_stats.ytd_high
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp);

UPDATE idx_stats SET idx_stats.ytd_dlow=idx_stats.`date`
                WHERE idx_stats.idx_last < idx_stats.ytd_low
                AND idx_code in (select idx_stats_last_tmp.idx_code from idx_stats_last_tmp)";
        $list_query = explode(";", $sql);
        foreach ($list_query as $item) {
            $error = $this->db->query($item);
            if (!$error) {
                return $error;
                break;
            }
        }
        unset($list_query);
        return TRUE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： statistic_update_idx_open_when_sequence_1
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function statistic_update_idx_open_when_sequence_1() {
        $sql = "UPDATE idx_stats,idx_specs SET idx_stats.idx_open=idx_specs.idx_last,
                idx_stats.idx_high=idx_specs.idx_last,
                idx_stats.idx_low=idx_specs.idx_last,
                idx_stats.idx_hhigh=idx_specs.time,
                idx_stats.idx_hlow=idx_specs.time
                WHERE idx_stats.idx_code=idx_specs.idx_code;";
        return $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： statistic_backup_idx_stats_idx_specs_idx_composition
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function statistic_backup_idx_stats_idx_specs_idx_composition() {
        $sql = "insert into idx_specs_intraday (idx_code,idx_name,idx_curr,idx_base,idx_type,idx_mother,idx_divisor,idx_mcap,idx_last,`date`,`time`,records,calculs,publications,idx_plast,idx_dcap,to_adjust,idx_mcap_nxt,idx_divisor_nxt,idx_bbs,idx_conv,idx_pclose,nxt_date)(select idx_code,idx_name,idx_curr,idx_base,idx_type,idx_mother,idx_divisor,idx_mcap,idx_last,`date`,`time`,records,calculs,publications,idx_plast,idx_dcap,to_adjust,idx_mcap_nxt,idx_divisor_nxt,idx_bbs,idx_conv,idx_pclose,nxt_date FROM idx_specs);

insert into idx_mstats_intraday (`date`, `time`, idx_code, idx_open, idx_high, idx_low, idx_last,sequence)(select `date`, `time`, idx_code, idx_open, idx_high, idx_low, idx_last,(select setting.value from setting where setting.key='sequence' ) from idx_stats);

INSERT INTO idx_composition_intraday (`date`,`time`,`idx_code`,`idx_curr`,`stk_code`,`stk_name`,`stk_curr`,`stk_mult`,`stk_shares_idx`,
                `stk_float_idx`,`stk_capp_idx`,`stk_price`,`curr_conv`,`stk_curr_conv`,`stk_mcap_idx`,`stk_dprice_nr`,
                `stk_dcurr_conv`,`stk_dprice`,`stk_dcap_idx`,`stk_dcap_nr`,`stk_wgt`,`stk_tr`,`stk_pr`,`stk_nr`,`nxt_date`,
                `nxt_stk_code`,`nxt_stk_mult`,`nxt_shares_idx`,`nxt_float_idx`,`nxt_capp_idx`,`nxt_price`,
                `to_adjust`,`nxt_adjca`,`nxt_adjcmp`,`nxt_adjust`,`new_shares`,`nstk_curr_conv`,`nstk_mcap_idx`,`specs_id`)(
SELECT `date`,`time`,`idx_code`,`idx_curr`,`stk_code`,`stk_name`,`stk_curr`,`stk_mult`,`stk_shares_idx`,
                `stk_float_idx`,`stk_capp_idx`,`stk_price`,`curr_conv`,`stk_curr_conv`,`stk_mcap_idx`,`stk_dprice_nr`,
                `stk_dcurr_conv`,`stk_dprice`,`stk_dcap_idx`,`stk_dcap_nr`,`stk_wgt`,`stk_tr`,`stk_pr`,`stk_nr`,`nxt_date`,
                `nxt_stk_code`,`nxt_stk_mult`,`nxt_shares_idx`,`nxt_float_idx`,`nxt_capp_idx`,`nxt_price`,
                `to_adjust`,`nxt_adjca`,`nxt_adjcmp`,`nxt_adjust`,`new_shares`,`nstk_curr_conv`,`nstk_mcap_idx`,`specs_id`
FROM idx_composition);

insert into stk_prices_intraday(stk_code,stk_name,stk_rlast,stk_last,stk_price,date,time,ticker,stk_rlast_date,stk_adjcls_date)(select stk_code,stk_name,stk_rlast,stk_last,stk_price,date,time,ticker,stk_rlast_date,stk_adjcls_date from stk_prices);

insert into cur_rates_intraday(currency,tos,code,curr_conv,`date`,time)(select currency,tos,code,curr_conv,`date`,time from cur_rates)";
        $list_query = explode(";", $sql);
        foreach ($list_query as $item) {
            $error = $this->db->query($item);
            if (!$error) {
                return $error;
                break;
            }
        }
        unset($list_query);
        return TRUE;
    }

    /*
     * end statistic
     * ----------------------------------------------------------------------------------------------------------------
     */

    /*     * ***********************************************************************************************************
     * Name         ： statistic_run_all
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.08.02 (Nguyen Tuan Anh)
     * *************************************************************************************************************** */

    function statistic_run_all() {
        self::statistic_when_sequence_other_0();
        $sql = "SELECT setting.value
                FROM setting
                WHERE setting.key = 'sequence';";
        $sequence = isset($this->db->query($sql)->row()->value) ? $this->db->query($sql)->row()->value : "";
        if ($sequence == "1") {
            self::statistic_update_idx_open_when_sequence_1();
        }
        self::statistic_backup_idx_stats_idx_specs_idx_composition();
        return true;
    }

    /*
     * end statistic_run_all
     * ----------------------------------------------------------------------------------------------------------------
     */

    /* call daily calculation prepare data */
    /*     * ***********************************************************************************************************
     * Name         ： daily_calculation_prepare_data
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function daily_calculation_prepare_data() {
        $path = '\\\LOCAL\IFRCVN\IMS\IMS_CALCULATION\UPLOAD\TEST\\';

        $sql = "TRUNCATE TABLE `ims_daily_calculation_upload`;";
        $this->db->simple_query($sql);

        $sql = "LOAD DATA LOCAL INFILE '" . str_replace("\\", "\\\\", $path . "IMS_DAILY_CALCULATION_UPLOAD.txt") . "'
                INTO TABLE `ims_daily_calculation_upload`
                FIELDS TERMINATED BY '\t'
                LINES TERMINATED BY '\r\n'
                IGNORE 1 LINES (`txtfile`, `table`);";
        $this->db->simple_query($sql);

        $sql = "SELECT `txtfile`, `table`
                FROM `ims_daily_calculation_upload`;";
        $list_upload = $this->db->query($sql)->result_array();

        if (is_array($list_upload) && count($list_upload) > 0) {
            foreach ($list_upload as $key => $value) {
                $sql = "TRUNCATE TABLE `{$value['table']}`;";
                $this->db->simple_query($sql);

                $sql = "LOAD DATA LOCAL INFILE '" . str_replace("\\", "\\\\", $path . $value['txtfile']) . "'
                        INTO TABLE `{$value['table']}`
                        FIELDS TERMINATED BY '\t'
                        LINES TERMINATED BY '\r\n'
                        IGNORE 1 LINES;";
                $this->db->simple_query($sql);
            }
        }
        return TRUE;
    }

    /* phần switch  */
    /* phần tính cho Switch--------------------------------------------------------------------------------------- */

    /*     * ***********************************************************************************************************
     * Name         ： export_file_text_daily_calculation
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ： export text for daily calculation LOCAL\IMS\IMS_CALCULATION\DAILY\
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.08.20 (Nguyen Tuan Anh)
     * *************************************************************************************************************** */

    public function export_file_text_daily_calculation() {
        /* list tables */
        $list_tables = array(array("table" => $this->cur_rates, "header" => explode(",", "code,currency,tos,curr_conv,date,time")),
            array("table" => $this->idx_ca, "header" => explode(",", "stk_code,idx_code,date,new_shares,nxt_float_idx,nxt_capp_idx,adj_close,intro,removal")),
            array("table" => $this->idx_calendar, "header" => explode(",", "date,nxt_date,prv_date")),
            array("table" => $this->idx_compo, "header" => explode(",", "stk_code,stk_name,stk_shares_idx,stk_float_idx,stk_capp_idx,idx_code,date")),
            array("table" => $this->idx_composition, "header" => explode(",", "stk_code,stk_name,stk_shares_idx,stk_float_idx,stk_capp_idx,stk_price,stk_curr,stk_mult,curr_conv,stk_curr_conv,stk_mcap_idx,date,time,stk_dcap_idx,stk_dcurr_conv,stk_dprice,idx_curr,idx_code,stk_wgt,nxt_shares_idx,nxt_float_idx,nxt_capp_idx,nxt_price,nxt_adjust,to_adjust,nstk_mcap_idx,nxt_date,idex")),
            array("table" => $this->idx_ref, "header" => explode(",", "idx_code,idx_name,idx_name_sn,idx_curr,idx_base,idx_dtbase,idx_type,idx_mother,idx_bbs,calculs,publications,idx_start_date,idx_end_date,idx_frequency,calcul_types,idx_capp,idx_qlf,idx_compo_rev,idx_shares_rev,idx_frev,idx_fbanding,idx_ftreproduct,idx_oproduct,idx_etfproduct,idx_c_mech,idx_histo,idx_launch,idx_web,idx_isin,idx_reuters,idx_bl,idx_yh,idx_ggl,idx_igs,idx_es,idx_sel,idx_inconnect,idx_capfrev,idx_sg,idx_last,idx_divisor_nxt,idx_ncompo,idx_wgt_type,idx_base_capi,start_time,end_time,frequency,mother,ims_order,idx_name_vn")),
            array("table" => $this->idx_specs, "header" => explode(",", "idx_code,idx_name,idx_curr,idx_base,idx_type,idx_mother,idx_divisor,idx_mcap,idx_last,date,time,records,calculs,publications,idx_plast,idx_dcap,to_adjust,idx_mcap_nxt,idx_divisor_nxt,idx_bbs,idx_conv,next_divisor_adjust,final_divisor,idx_pclose")),
            array("table" => $this->mar_ref, "header" => explode(",", "mar_code,mar_name")),
            array("table" => $this->sec_ref, "header" => explode(",", "sec_code,sec_name,sec_name_vn")),
            array("table" => $this->stk_div, "header" => explode(",", "stk_code,stk_name,stk_divnet,stk_divgross,exdate")),
            array("table" => $this->stk_feed, "header" => explode(",", "ticker,date,time,stk_last")),
            array("table" => $this->stk_prices, "header" => explode(",", "stk_code,stk_name,stk_market,stk_sector,stk_curr,stk_mult,stk_rlast,stk_last,stk_open,stk_high,stk_low,stk_price,date,time")),
            array("table" => $this->stk_ref, "header" => explode(",", "stk_code,stk_name,stk_name_sn,stk_name_sn_vn,stk_market,stk_sector,stk_curr,stk_mult,pvnsample,ipo")),
            array("table" => $this->setting, "header" => explode(",", "group,key,value"))
        );

        /* get $cal_date */
        $sql = "SELECT {$this->setting}.value
                FROM {$this->setting}
                WHERE {$this->setting}.key = 'calculation_date';";
        $cal_date = isset($this->db->query($sql)->row()->value) ? str_replace("-", "", $this->db->query($sql)->row()->value) : "no_date";

        /* path export */
        if ($_SERVER["SERVER_NAME"] == "local" || strpos($_SERVER["SERVER_NAME"], "local.") !== false) {
            $path = "\\\LOCAL\IFRCVN\IMS\IMSTXT\DAILY\BACKUP/" . $cal_date . "\/";
        } else {
            $path = "assets/download/daily_calculation/{$cal_date}/";
        }
        if (!is_dir($path)) {
            $old = umask(0); 
            mkdir($path,0777);
            umask($old);
        }

        /* export file text */
        foreach ($list_tables as $item) {
            /* get headers */
            $fields = $this->db->list_fields($item["table"]);

            /* remove id */
            foreach ($item["header"] as $k => $v) {
                if (!in_array($v, $fields)) {
                    unset($item["header"][$k]);
                }
            }

            /* get data */
            $sql = "SELECT *
                    FROM {$item["table"]};";
            $arr = $this->db->query($sql)->result_array();

            /* export file text */
            export_file($path, $item["table"] . ".txt", $item["header"], $arr, 0);
            unset($item["header"]);
            unset($fields);
            unset($arr);
        }
    }

    /*     * ***********************************************************************************************************
     * Name         ： backup_dump_file_sql
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.06.4 (LongNguyen)
     * *************************************************************************************************************** */

    public function backup_dump_file_sql($tableSwitch) {
        $this->load->dbutil();
        $this->load->helper('file');

        $tables = fopen('assets/data_upload_indexes/switch_tables.txt', 'r');
        $ln = 0;
        $tables_temp = array();
        while ($table = fgets($tables)) {
            if ($ln != 0) {
                $col = explode(chr(9), $table);
                if ($col[0] != '' && $col[1] != '') {
                    $tables_temp[trim($col[0])] = trim($col[1]);
                }
            }
            $ln = 1;
        }
        fclose($tables);
        $tables = $tables_temp;
        unset($tables_temp);

        foreach ($tables as $table => $switch_table) {
            if ($table != '' && $switch_table != '') {
                $this->db->simple_query("DROP TABLE IF EXISTS `{$switch_table}`");
                if ($tableSwitch == 'switch') {
                    $this->db->simple_query("CREATE TABLE `{$switch_table}` LIKE `{$table}`");

                    $sql = "INSERT INTO `{$switch_table}` ( SELECT * FROM `{$table}`)";

                    $this->db->simple_query($sql);
                }
            }
        }

        $tables = array_keys($tables);
        $backup = backup_tables($tables);
        if ($tableSwitch != 'switch') {
            $this->switch_setting = $this->setting;
            $this->switch_idx_specs = $this->idx_specs;
            $this->switch_stk_prices = $this->stk_prices;
            $this->switch_idx_compo = $this->idx_compo;
            $this->switch_idx_calendar = $this->idx_calendar;
        }
        $calculation_date = $this->db->query("SELECT `value` FROM {$this->switch_setting} WHERE `key`='calculation_date' limit 1")->row()->value;
        if (is_dir('\\\LOCAL\IFRCVN\IMS\IMS_CALCULATION\BACKUP\\')) {
            write_file("\\\LOCAL\IFRCVN\IMS\IMS_CALCULATION\BACKUP\\" . str_replace('-', '', $calculation_date . '.sql'), $backup);
        }
        write_file("assets/download/backup/" . str_replace('-', '', $calculation_date . '.sql'), $backup);

        $this->db->simple_query("INSERT INTO {$this->idx_specs_histoday} (`idx_code`,`idx_name`,`idx_curr`,`idx_base`,`idx_type`,`idx_mother`,`idx_divisor`,`idx_mcap`,`idx_last`,
                `date`,`time`,`records`,`calculs`,`publications`,`idx_plast`,`idx_dcap`,`to_adjust`,`idx_mcap_nxt`,
                `idx_divisor_nxt`,`idx_bbs`,`idx_conv`,`idx_pclose`,`idx_group`,`idx_var`,`ip_last`,`ip_plast`,`idx_dvar`,
                `nxt_date`,`idx_change`,`idx_dchange`)(
                select `idx_code`,`idx_name`,`idx_curr`,`idx_base`,`idx_type`,`idx_mother`,`idx_divisor`,`idx_mcap`,`idx_last`,
                                `date`,`time`,`records`,`calculs`,`publications`,`idx_plast`,`idx_dcap`,`to_adjust`,`idx_mcap_nxt`,
                                `idx_divisor_nxt`,`idx_bbs`,`idx_conv`,`idx_pclose`,`idx_group`,`idx_var`,`ip_last`,`ip_plast`,`idx_dvar`,
                                `nxt_date`,`idx_change`,`idx_dchange`
                FROM {$this->switch_idx_specs}  WHERE CONCAT(idx_code,date,time) NOT IN ( SELECT CONCAT(idx_code,date,time) FROM {$this->idx_specs_histoday})
                )");

        $this->db->simple_query("INSERT INTO {$this->stk_prices_histoday} (`stk_code`,`stk_name`,`stk_market`,`stk_sector`,`stk_curr`,`stk_mult`,`stk_rlast`,`stk_last`,`stk_open`,`stk_high`,`stk_low`,`stk_price`,`date`,`time`,`ticker`,`nxt_date`,`nxt_stk_rlast`)
                                (
                                    SELECT `stk_code`,`stk_name`,`stk_market`,`stk_sector`,`stk_curr`,`stk_mult`,`stk_rlast`,`stk_last`,`stk_open`,`stk_high`,`stk_low`,`stk_price`,`date`,`time`,`ticker`,`nxt_date`,`nxt_stk_rlast`
                                    FROM {$this->switch_stk_prices} ORDER BY `date` ASC
                                )");

        $this->db->simple_query("INSERT INTO {$this->idx_composition_histoday} (`date`,`time`,`idx_code`,`idx_curr`,`stk_code`,`stk_name`,`stk_curr`,`stk_mult`,`stk_shares_idx`,
                `stk_float_idx`,`stk_capp_idx`,`stk_price`,`curr_conv`,`stk_curr_conv`,`stk_mcap_idx`,`stk_dprice_nr`,
                `stk_dcurr_conv`,`stk_dprice`,`stk_dcap_idx`,`stk_dcap_nr`,`stk_wgt`,`stk_tr`,`stk_pr`,`stk_nr`,`nxt_date`,
                `nxt_stk_code`,`nxt_stk_mult`,`nxt_shares_idx`,`nxt_float_idx`,`nxt_capp_idx`,`nxt_price`,
                `to_adjust`,`nxt_adjca`,`nxt_adjcmp`,`nxt_adjust`,`new_shares`,`nstk_curr_conv`,`nstk_mcap_idx`,`specs_id`)(
SELECT `date`,`time`,`idx_code`,`idx_curr`,`stk_code`,`stk_name`,`stk_curr`,`stk_mult`,`stk_shares_idx`,
                `stk_float_idx`,`stk_capp_idx`,`stk_price`,`curr_conv`,`stk_curr_conv`,`stk_mcap_idx`,`stk_dprice_nr`,
                `stk_dcurr_conv`,`stk_dprice`,`stk_dcap_idx`,`stk_dcap_nr`,`stk_wgt`,`stk_tr`,`stk_pr`,`stk_nr`,`nxt_date`,
                `nxt_stk_code`,`nxt_stk_mult`,`nxt_shares_idx`,`nxt_float_idx`,`nxt_capp_idx`,`nxt_price`,
                `to_adjust`,`nxt_adjca`,`nxt_adjcmp`,`nxt_adjust`,`new_shares`,`nstk_curr_conv`,`nstk_mcap_idx`,`specs_id`
FROM {$this->idx_composition} WHERE CONCAT(idx_code,date,time) NOT IN ( SELECT CONCAT(idx_code,date,time) FROM {$this->idx_composition_histoday}))");
    }

    /*     * ***********************************************************************************************************
     * Name         ： switch_update_stk_prices
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：   BACKUP STK_PRICES
     *                  DELETE LINES WHERE NXT_DATE IS EMPTY
     *                   REPLACE DATES BY NXT_DATE
     *                  Check and update STK_CODE from IDX_COMPO
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.24 (LongNguyen) update 2013.08.05 (LongNguyen)
     * *************************************************************************************************************** */

    public function switch_update_stk_prices($tableSwitch) {

        if ($tableSwitch != 'switch') {
            $this->switch_setting = $this->setting;
            $this->switch_idx_specs = $this->idx_specs;
            $this->switch_stk_prices = $this->stk_prices;
            $this->switch_idx_compo = $this->idx_compo;
            $this->switch_idx_calendar = $this->idx_calendar;
        }

        $this->db->simple_query("UPDATE {$this->switch_stk_prices} SET `date` =(select `value` FROM setting WHERE `key`='nxt_date' and `group`='setting' limit 1)");

        $this->db->simple_query("INSERT INTO {$this->switch_stk_prices} (`stk_code`,`stk_name`,`date`)
                                (
                                    SELECT `stk_code`,`stk_name`,`date`
                                    FROM {$this->switch_idx_compo} WHERE stk_code NOT IN ( SELECT stk_code FROM {$this->switch_stk_prices})
                                )");

        $this->db->simple_query("UPDATE {$this->switch_stk_prices} set `stk_rlast` = `stk_price` where `stk_price` <>0");

        $this->db->simple_query("UPDATE {$this->switch_stk_prices} pr,{$this->idx_ca} ca set 
            pr.`stk_rlast` = ca.`adj_close` 
            where ca.`adj_close` <>0 and pr.stk_code=ca.stk_code and pr.date=ca.date");

        $this->db->simple_query("UPDATE {$this->switch_stk_prices} set 
            `stk_rlast_date` = (select `value` FROM setting WHERE `key`='calculation_date' and `group`='setting' limit 1)");

        $this->db->simple_query("UPDATE {$this->switch_stk_prices} pr,{$this->idx_ca} ca 
            set pr.`stk_adjcls_date` =(select `value` FROM setting WHERE `key`='nxt_date' and `group`='setting' limit 1) 
            where ca.`adj_close` <> 0 and ca.`adj_close` IS NOT NULL and pr.stk_code=ca.stk_code and pr.date=ca.date");


        $this->db->simple_query("UPDATE {$this->switch_stk_prices},idx_ca
                                set {$this->switch_stk_prices}.stk_rlast = idx_ca.adj_close
                                where idx_ca.adj_close <> 0 and {$this->switch_stk_prices}.stk_code=idx_ca.stk_code and idx_ca.date={$this->switch_stk_prices}.date");
        $this->db->simple_query("UPDATE {$this->switch_stk_prices} SET `stk_last` = NULL,`stk_price`=NULL,`time` =NULL");
    }

    /*     * ***********************************************************************************************************
     * Name         ： switch_update_idx_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：   2.2. UPDATE IDX_SPECS
     *                  BACKUP IDX_SPECS
     *                  DELETE LINES WHERE NXT_DATE IS EMPTY
     *                  UPDATE IDX_DIVISOR, IDX_MCAP
     *                  IDX_DIVISOR=IDX_DIVISOR_NXT
     *                  IDX_MCAP=IDX_MCAP_NXT
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.27 (LongNguyen)
     * *************************************************************************************************************** */

    public function switch_update_idx_specs($tableSwitch) {
        if ($tableSwitch != 'switch') {
            $this->switch_setting = $this->setting;
            $this->switch_idx_specs = $this->idx_specs;
            $this->switch_stk_prices = $this->stk_prices;
            $this->switch_idx_compo = $this->idx_compo;
            $this->switch_idx_calendar = $this->idx_calendar;
        }
        $this->db->simple_query("DELETE FROM {$this->switch_idx_specs} WHERE nxt_date IS NULL OR nxt_date ='0000-00-00'");

        $this->db->simple_query("UPDATE {$this->switch_idx_specs} SET `date` =(select `value` FROM setting WHERE `key`='nxt_date' and `group`='setting' limit 1)");

        $this->db->simple_query("UPDATE {$this->switch_idx_specs} SET `idx_plast` = `idx_last`,`idx_pclose`=`idx_last`");
        $this->db->simple_query("UPDATE {$this->switch_idx_specs} SET idx_divisor=idx_divisor_nxt WHERE idx_divisor_nxt<>0");

        $this->db->simple_query("UPDATE {$this->switch_idx_specs} SET 
            idx_mcap=NULL,
            idx_last=NULL,
            idx_dcap=NULL,
            idx_mcap_nxt=NULL,
            idx_divisor_nxt=NULL,
            idx_var=NULL,
            idx_conv=NULL,
            idx_dvar=NULL,
            idx_change=NULL,
            idx_dchange=NULL,
            ip_last=NULL,
            ip_plast=NULL,
            next_divisor_adjust=NULL,
            final_divisor=NULL,
            time=NULL,
            records=NULL,
            idx_dcap=NULL,
            to_adjust=NULL
            ");
    }

    /*     * ***********************************************************************************************************
     * Name         ： switch_update_idx_compo
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：   BACKUP IDX_COMPOSITION
     *                   UPDATE IDX_COMPO
     *                   EMPTY IDX_COMPO
     *                   IDX_COMPO.DATES=IDX_COMPOSITION.NXT_DATE
     *                   (KEY:NXT_DATE
     *                   IDX_COMPO.STK_CODE=IDX_COMPOSITION.STK_CODE
     *                   IDX_COMPO.STK_NAME=IDX_COMPOSITION.STK_NAME
     *                   IDX_COMPO.STK_SHARES_IDX=IDX_COMPOSITION.NXT_SHARES_IDX
     *                   IDX_COMPO.STK_FLOAT_IDX=IDX_COMPOSITION.NXT_FLOAT_IDX
     *                   IDX_COMPO.STK_CAPP_IDX=IDX_COMPOSITION.NXT_CAPP_IDX
     *                   IDX_COMPO.IDX_CODE=IDX_COMPOSITION.IDX_CODE
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.27 (LongNguyen)
     * *************************************************************************************************************** */

    public function switch_update_idx_compo($tableSwitch) {
        if ($tableSwitch != 'switch') {
            $this->switch_setting = $this->setting;
            $this->switch_idx_specs = $this->idx_specs;
            $this->switch_stk_prices = $this->stk_prices;
            $this->switch_idx_compo = $this->idx_compo;
            $this->switch_idx_calendar = $this->idx_calendar;
        }
        $this->db->truncate($this->switch_idx_compo);

        $sql = "INSERT INTO {$this->switch_idx_compo} (date, stk_code, stk_name, stk_shares_idx, stk_float_idx, stk_capp_idx, idx_code)
                (SELECT (
                    SELECT {$this->switch_setting}.value
                    FROM {$this->switch_setting}
                    WHERE {$this->switch_setting}.key = 'nxt_date'
                    AND {$this->switch_setting}.group = 'setting'
                    LIMIT 1) nxt_date,
                nxt_stk_code,
                (
                    SELECT stk_name
                    FROM stk_ref
                    WHERE stk_code = nxt_stk_code
                    LIMIT 1) nxt_stk_name,
                nxt_shares_idx, nxt_float_idx, nxt_capp_idx, idx_code
                FROM {$this->idx_composition}
                WHERE nxt_stk_code IS NOT NULL);";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： switch_update_setting
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.27 (LongNguyen)
     * *************************************************************************************************************** */

    public function switch_update_setting($tableSwitch) {
        if ($tableSwitch != 'switch') {
            $this->switch_setting = $this->setting;
            $this->switch_idx_specs = $this->idx_specs;
            $this->switch_stk_prices = $this->stk_prices;
            $this->switch_idx_compo = $this->idx_compo;
            $this->switch_idx_calendar = $this->idx_calendar;
        }
        $calculs_date = $this->db->query("SELECT `value` FROM {$this->switch_setting} WHERE `key`='nxt_date' AND `group`='setting' limit 1")->row();
        $calculs_date = $calculs_date->value;

        $this->db->simple_query("UPDATE {$this->switch_setting} SET `value`='{$calculs_date}' WHERE `key`='calculation_date' AND `group`='setting'");

        $nxt_date = $this->db->query("SELECT `nxt_date` FROM {$this->switch_idx_calendar} WHERE `date`='{$calculs_date}' limit 1")->row();
        $nxt_date = $nxt_date->nxt_date;
        $this->db->simple_query("UPDATE {$this->switch_setting} SET `value`='{$nxt_date}' WHERE `key`='nxt_date' AND `group`='setting'");
        $this->db->simple_query("UPDATE {$this->switch_setting} SET `value`='1' WHERE `key`='sequence' AND `group`='setting'");

        /* UPDATE IDX_REF SET DATE = NXT_DATE */
        $this->db->query("UPDATE {$this->idx_ref} SET date = '{$calculs_date}'");
    }

    /*     * ***********************************************************************************************************
     * Name         ： confirmation_set_idx_close
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.28 (LongNguyen)
     * *************************************************************************************************************** */
    
    /*     * ***********************************************************************************************************
     * Name         ： confirmation_set_idx_close
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： Update  2013.12.11 (Nguyen Tuan Anh)
     * *************************************************************************************************************** */

    public function confirmation_set_idx_close() {
        $this->db->simple_query('UPDATE idx_stats SET idx_close=idx_last');
    }

    /*     * ***********************************************************************************************************
     * Name         ： confirmation_backup_closed_calculation
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.28 (LongNguyen)
     * *************************************************************************************************************** */

    public function backup_closed_calculation() {
        $result['idx_stats'] = self::insert_into_table('idx_stats', 'idx_stats_histoday', 'idx_code', 'date');

        $result['stk_prices'] = self::insert_into_table('stk_prices', 'stk_prices_histoday', 'stk_code', 'date');

        $result['cur_rates'] = self::insert_into_table('cur_rates', 'cur_rates_histoday', 'code', 'date');

        $result['idx_currency'] = self::update_idx_currency_from_cur_rates_histoday();

        $result['stk_div'] = self::insert_into_table('stk_div', 'stk_div_histoday', 'stk_code', 'exdate');

        $result['idx_ca'] = self::insert_into_table('idx_ca', 'idx_ca_histoday', 'idx_code', 'date');

        $result['idx_composition'] = self::insert_into_table('idx_composition', 'idx_composition_histoday', 'idx_code', 'date');

        $result['idx_specs'] = self::insert_into_table('idx_specs', 'idx_specs_histoday', 'idx_code', 'date');

        $result['idx_ref'] = self::insert_into_table('idx_ref', 'idx_ref_histoday', 'idx_code', 'date');
        return $result;
    }

    /*     * ***********************************************************************************************************
     * Name         ： replace_histoday
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.08.16 (LongNguyen)
     * *************************************************************************************************************** */

    public function replace_histoday($table = '') {
        $result = array();
        if ($table == '')
            return FALSE;
        $table_list['idx_stats'] = array('idx_code', 'date');

        $table_list['stk_prices'] = array('stk_code', 'date');

        $table_list['cur_rates'] = array('code', 'date');

        $table_list['stk_div'] = array('stk_code', 'exdate');

        $table_list['idx_ca'] = array('idx_code', 'date');

        $table_list['idx_composition'] = array('idx_code', 'date');

        $table_list['idx_ref'] = array('idx_code', 'date');

        $table_list['idx_specs'] = array('idx_code', 'date');
        if (isset($table_list[$table])) {
            $code_field = $table_list[$table][0];
            $date_field = $table_list[$table][1];
        } else {
            return false;
        }
        $result_fields = array();
        $result_fields_histoday = array();
        $fields_table = $this->db->list_fields($table);
        foreach ($fields_table as $field) {
            $result_fields[$field] = $field;
        }
        unset($fields_table);
        $histoday = $table . '_histoday';
        $fields_table = $this->db->list_fields($histoday);
        foreach ($fields_table as $field) {
            $result_fields_histoday[$field] = $field;
        }
        $fields = array_intersect($result_fields, $result_fields_histoday);
        unset($result_fields_histoday);
        unset($result_fields);
        if (isset($fields['id'])) {
            unset($fields['id']);
        }
        //check xem data đã tồn tại hay chưa
        $fieldsCheck = $table . '.' . $code_field . ',' . $table . '.' . $date_field;
        $sql = "select {$fieldsCheck}
                from {$table},{$histoday}
                where {$histoday}.{$code_field} = {$table}.{$code_field} and {$histoday}.{$date_field}={$table}.{$date_field}
                group by {$table}.{$code_field}";
        $dataCheck = $this->db->query($sql)->result_array();
        unset($fieldsCheck);
        if (is_array($dataCheck) && count($dataCheck) > 0) {
            //$date_val = $dataCheck[0][$date_field];
            $code_val = "('";
            foreach ($dataCheck as $key => $value) {
                $code[] = $value[$code_field];
            }
            $code_val.=implode("','", $code);
            $code_val.="')";
            $sql = "DELETE FROM {$histoday} WHERE `{$date_field}` = (SELECT `value` FROM setting WHERE `key`='calculation_date' limit 1) and `{$code_field}` in {$code_val}";
            $this->db->query($sql);
            $nums = $this->db->affected_rows();
            $result['delete'] = $nums;
            $result['insert'] = self::insert_into_table($table, $histoday, $code_field, $date_field);
        } else {
            $result['delete'] = 0;
            $result['insert'] = self::insert_into_table($table, $histoday, $code_field, $date_field);
        }
        return $result;
    }

    public function insert_into_table($table = '', $histoday = '', $code = '', $date = '') {
        if ($table != '' && $histoday != '') {
            // giao field giữa 2 table
            $result_fields = array();
            $result_fields_histoday = array();
            $fields_table = $this->db->list_fields($table);
            foreach ($fields_table as $field) {
                $result_fields[$field] = $field;
            }
            unset($fields_table);
            $fields_table = $this->db->list_fields($histoday);
            foreach ($fields_table as $field) {
                $result_fields_histoday[$field] = $field;
            }
            $fields = array_intersect($result_fields, $result_fields_histoday);
            unset($result_fields_histoday);
            unset($result_fields);
            if (isset($fields['id'])) {
                unset($fields['id']);
            }
            //check xem data đã tồn tại hay chưa
            $fieldsCheck = $table . '.' . implode(',' . $table . '.', $fields);
            $sql = "select {$fieldsCheck}
                from {$table},{$histoday}
                where {$histoday}.{$code} = {$table}.{$code}";
            if ($date != '') {
                $sql.=" and {$histoday}.{$date}={$table}.{$date}
                    and {$table}.{$date}=(SELECT `value` FROM setting WHERE `key`='calculation_date' limit 1)";
            }
            $sql.=" group by {$table}.{$code}";
            $dataCheck = $this->db->query($sql)->result_array();
            unset($fieldsCheck);
            if (is_array($dataCheck) && count($dataCheck) > 0) {
                return $dataCheck;
            } else {
                $fields = implode(',', array_values($fields));
                if ($date != '') {
                    $sql = "select {$fields} from {$table} where {$date}=(SELECT `value` FROM setting WHERE `key`='calculation_date' limit 1)";
                } else {
                    $sql = "select {$fields} from {$table}";
                }
                $query = $this->db->query($sql);
                unset($fields);
                $data = $query->result_array();
                if (is_array($data) && count($data) > 0) {
                    $count_pre = $this->db->count_all($histoday);
                    /* delete from idx_ca, stk_div where date = calculation_date */
                    if ($table == 'idx_ca' || $table == 'stk_div') {
                        $sql = "DELETE FROM {$table}
                                WHERE {$date} = (SELECT {$this->setting}.value FROM {$this->setting} WHERE {$this->setting}.key = 'calculation_date' LIMIT 1);";
                        $this->db->query($sql);
                    }
                    $this->db->insert_batch($histoday, $data);
                    $count_last = $this->db->count_all($histoday);
                    unset($data);
                    return ($count_last - $count_pre);
                }
                return "{$table}  no data ";
            }
            return FALSE;
        }

        return FALSE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： report_confirmation_idx_specs
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.28 (LongNguyen)
     * *************************************************************************************************************** */

    public function report_confirmation_idx_specs() {

        $this->db->simple_query('TRUNCATE report_confirmation_idx_specs');

        $this->db->simple_query('INSERT INTO report_confirmation_idx_specs(`date`,`idx_code`,`idx_last`,`pclose`)(
        SELECT `date`,`idx_code`,`idx_last`,`idx_last` FROM idx_specs
        )');
    }

    /* step checkout --------------------------------------------------------------------------------------------------* */
    /*     * ***********************************************************************************************************
     * Name         ： checkout_check_dates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.29 (LongNguyen)
     * *************************************************************************************************************** */

    public function getCheckOutDate($table) {
        $this->db->distinct();
        $this->db->select('date');
        $query = $this->db->get($table);
        $temp = $query->result_array();
        $temp2 = array();
        if (is_array($temp) && count($temp) > 0) {
            foreach ($temp as $value) {
                $temp2[] = $value['date'];
            }
        }
        $data['date'] = $temp2;
        unset($temp2);
        unset($temp);
        unset($query);
        if ($this->db->field_exists('nxt_date', $table)) {
            $sql = "SELECT DISTINCT nxt_date FROM {$table}";
            $result = $this->db->query($sql)->result_array();
            $temp2 = array();
            if (is_array($result) && count($result) > 0) {
                foreach ($result as $value) {
                    $temp2[] = $value['nxt_date'];
                }
            }
            $data['nxt_date'] = $temp2;
        }
        unset($temp2);
        unset($result);
        return $data;
    }

    /*     * ***********************************************************************************************************
     * Name         ： checkout_check_idx_ca
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.29 (LongNguyen)
     * *************************************************************************************************************** */

    public function checkout_check_idx_ca() {
        $result = array('data' => array(), 'count' => 0);
        $result['data'] = $this->db->query("SELECT * FROM idx_ca WHERE `date`=(select `value` FROM setting WHERE `key`='nxt_date' and `group`='setting')")->result_array();
        $result['count'] = count($this->db->query("SELECT COUNT(*) FROM idx_ca WHERE `date`=(select `value` FROM setting WHERE `key`='nxt_date' and `group`='setting') GROUP BY stk_code")->result_array());
        return $result;
//return $this->db->query("SELECT * FROM {$this->idx_ca} limit 10")->result_array();
    }

    /*     * ***********************************************************************************************************
     * Name         ： checkin_check_idx_ca
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.11.22 (Nguyen Tuan Anh)
     * *************************************************************************************************************** */

    public function checkin_check_idx_ca() {
        $result = array('data' => array(), 'count' => 0);
        $result['data'] = $this->db->query("SELECT * FROM idx_ca WHERE `date`=(select `value` FROM setting WHERE `key`='calculation_date' and `group`='setting')")->result_array();
        $result['count'] = count($this->db->query("SELECT COUNT(*) FROM idx_ca WHERE `date`=(select `value` FROM setting WHERE `key`='calculation_date' and `group`='setting') GROUP BY stk_code")->result_array());
        return $result;
    }

    /*     * ***********************************************************************************************************
     * Name         ： checkout_check_availability_of_stk_ref_idx_ref_cur_rates
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.29 (LongNguyen)
     * *************************************************************************************************************** */

    public function checkout_check_availability_of_stk_ref_idx_ref_cur_rates() {
        $result = array();
        /*
          STK_CODE
          LIST UNIQUE OF IDX_CA.STK_CODE (NEXT DATE)
          STK_REF.STK_CODE
          IF IDX_CA.STK_CODE=STK_REF.STK_CODE → OK
         */
        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca}
                                             WHERE `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') 
                                             AND stk_code NOT IN (SELECT stk_code FROM {$this->stk_ref})");
        $data = array();
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['stk_code']['stk_ref'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();
        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca}
                                             WHERE `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') 
                                             AND stk_code NOT IN (SELECT stk_code FROM {$this->stk_prices})");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['stk_code']['stk_prices'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();
        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca}
                                             WHERE `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') 
                                             AND stk_code NOT IN (SELECT stk_code FROM {$this->stk_feed})");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['stk_code']['stk_feed'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();
        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca}
                                             WHERE `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') 
                                             AND stk_code NOT IN (SELECT stk_code FROM {$this->idx_compo})");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['stk_code']['stk_feed'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();
        /*
          IDX_CODE
          LIST UNIQUE OF IDX_CA.IDX_CODE (MOTHER)
          IDX_REF.IDX_MOTHER
          IF IDX_CA.IDX_CODE=IDX_REF.IDX_MOTHER → OK
         */
        $query = $this->db->query("SELECT DISTINCT idx_code FROM {$this->idx_ca} 
                                                        WHERE `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') 
                                                        AND idx_code NOT IN (SELECT idx_mother FROM {$this->idx_ref})");

        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['idx_code'];
            }
        }
        $result['idx_code']['idx_ref'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();

        $query = $this->db->query("SELECT DISTINCT idx_code FROM {$this->idx_ca} 
                                                        WHERE `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') 
                                                        AND idx_code NOT IN (SELECT idx_code FROM {$this->idx_compo})");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['idx_code'];
            }
        }
        $result['idx_code']['idx_compo'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();

        /* CURRENCIES
          STK_CURR+IDX_CURR=CUR_CODE → OK
          STK_CURR FROM STK_REF WHERE IDX_CA.STK_CODE=STK_REF.STK_CODE
          IDX_CURR FROM IDX_REF WHERE IDX_CA.IDX_CODE=IDX_REF.IDX_MOTHER
          IDX_CURR(IDX_CODE)+IDX_CURR(IDX_MOTHER)=CUR_CODE → OK
          IDX_REF */
        $query = $this->db->query("select cur_code from (SELECT DISTINCT CONCAT({$this->idx_ref}.idx_curr,{$this->stk_ref}.stk_curr) as cur_code
        FROM {$this->idx_ca},{$this->idx_ref},{$this->stk_ref} 
        WHERE {$this->idx_ca}.stk_code={$this->stk_ref}.stk_code AND {$this->idx_ca}.idx_code={$this->idx_ref}.idx_mother 
        AND {$this->stk_ref}.stk_curr!={$this->idx_ref}.idx_curr) cur_list
        WHERE cur_list.cur_code NOT IN (SELECT `code` FROM {$this->cur_rates})");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['cur_code'];
            }
        }
        $result['currency']['idx_ca'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();


        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca} WHERE new_shares <=0 AND `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['values']['idx_ca']['new_shares'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();

        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca} WHERE (nxt_float_idx < 0 OR nxt_float_idx > 100) and `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['values']['idx_ca']['nxt_float_idx'] = array('num' => $query->num_rows(), 'data' => $data);

        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca} WHERE (nxt_capp_idx < 0 OR nxt_capp_idx > 100) and `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }

        $result['values']['idx_ca']['nxt_capp_idx'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();

        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca} WHERE adj_close <= 0 and `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        $num = $query->num_rows();
        if ($num > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $query = $this->db->query("DROP TEMPORARY TABLE IF EXISTS temp_idx_ca");
        $query = $this->db->query("CREATE TEMPORARY TABLE temp_idx_ca (SELECT
            stk_code
        FROM    idx_ca
        WHERE  `date`=(SELECT `value` FROM setting WHERE `key`='nxt_date' AND `group`='setting')
        GROUP BY
            adj_close,stk_code)");
        $query = $this->db->query("SELECT stk_code FROM temp_idx_ca GROUP BY stk_code
        HAVING COUNT(stk_code) > 1");

        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }

        $query = $this->db->query("DROP TEMPORARY TABLE IF EXISTS temp_idx_ca");
        $result['values']['idx_ca']['adj_close'] = array('num' => count($data), 'data' => array_unique($data));
        $data = array();

        $query = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_ca} WHERE to_adjust > 0 and stk_split >0 AND `date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['stk_code'];
            }
        }
        $result['values']['idx_ca']['to_adjust'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();
        $query = $this->db->query("SELECT DISTINCT idx_code FROM {$this->idx_ref} WHERE idx_last <= 0 and `idx_start_date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['idx_code'];
            }
        }
        $result['values']['idx_ref']['idx_last'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();

        $query = $this->db->query("SELECT DISTINCT idx_divisor_nxt FROM {$this->idx_ref} WHERE idx_last <= 0 and `idx_start_date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')");
        if ($query->num_rows() > 0) {
            $query_result = $query->result_array();
            foreach ($query_result as $key => $value) {
                $data[] = $value['idx_divisor_nxt'];
            }
        }
        $result['values']['idx_ref']['idx_divisor_nxt'] = array('num' => $query->num_rows(), 'data' => $data);
        $data = array();
        return $result;
    }

    /*     * ***********************************************************************************************************
     * Name         ： checkout_check_availability_new_indexes_and_its_component
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC removal
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.29 (LongNguyen)
     * *************************************************************************************************************** */

    public function checkout_check_availability_new_indexes_and_its_component() {
        $return = array();
        $sql = "SELECT  DISTINCT idx_code,event_name 
            FROM {$this->idx_ca}
            WHERE date=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') ";
        $query = $this->db->query($sql);
        $list_ca = $query->result_array();
        $sql = "SELECT  DISTINCT stk_code,idx_code
            FROM {$this->idx_ca}
            WHERE date=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting') ";
        $query = $this->db->query($sql);
        $list_stk_code = $query->result_array();
        $list = array();
        if (is_array($list_stk_code) && count($list_stk_code) > 0) {
            foreach ($list_stk_code as $value) {
                $list[$value['idx_code']][] = $value['stk_code'];
            }
        }

        if (is_array($list_ca) && count($list_ca) > 0) {
            foreach ($list_ca as &$value) {
                $value['list'] = $list[$value['idx_code']];
                $value['num'] = count($list[$value['idx_code']]);
            }
            unset($value);
        }
        $return['index'] = $list_ca;
        /* phan tinh stk_code */
        $sql = "SELECT  DISTINCT {$this->idx_ca}.stk_code,event_name
            FROM {$this->idx_ca}
            WHERE {$this->idx_ca}.`date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')";
        $list_stk = $this->db->query($sql)->result_array();

        $sql = "SELECT  DISTINCT stk_code,idx_code
            FROM {$this->idx_ca}
            WHERE {$this->idx_ca}.`date`=(SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting')";
        $list_idx_code = $this->db->query($sql)->result_array();
        $list = array();
        if (is_array($list_idx_code) && count($list_idx_code) > 0) {
            foreach ($list_idx_code as $value) {
                $list[$value['stk_code']][] = $value['idx_code'];
            }
        }

        if (is_array($list_stk) && count($list_stk) > 0) {
            foreach ($list_stk as &$value) {
                $value['list'] = $list[$value['stk_code']];
                $value['num'] = count($list[$value['stk_code']]);
            }
            unset($value);
        }
        $return['stk']['list'] = $list_stk;
        /* phan date */

        $return['stk']['date']['calculation_date'] = $this->db->query("SELECT `value` FROM {$this->setting} WHERE `key`='calculation_date' AND `group`='setting'")->row_array();
        $return['stk']['date']['idx_compo'] = $this->db->query("SELECT DISTINCT `date` FROM {$this->idx_compo} ")->result_array();
        $return['stk']['date']['idx_specs'] = $this->db->query("SELECT DISTINCT `date` FROM {$this->idx_specs} ")->result_array();
        $return['stk']['date']['stk_prices'] = $this->db->query("SELECT DISTINCT `date` FROM {$this->stk_prices} ")->result_array();
        $return['stk']['date']['stk_feed'] = $this->db->query("SELECT DISTINCT `date` FROM {$this->stk_feed} ")->result_array();
        $return['stk']['date']['cur_rates'] = $this->db->query("SELECT DISTINCT `date` FROM {$this->cur_rates} ")->result_array();
        /* setting */
        $return['setting']['nxt_date'] = $this->db->query("SELECT `value` FROM {$this->setting} WHERE `key`='nxt_date' AND `group`='setting'")->row_array();

        $return['num_idx_code']['idx_specs'] = $this->db->query("SELECT count(idx_code) as `count` FROM {$this->idx_specs} ")->row()->count;
        $return['num_idx_code']['idx_ref'] = $this->db->query("SELECT count(idx_code) as `count` FROM {$this->idx_ref} ")->row()->count;
        $return['num_idx_code']['idx_compo'] = $this->db->query("SELECT count(idx_code) as `count` FROM {$this->idx_compo} ")->row()->count;
        $return['num_idx_code']['idx_mother'] = $this->db->query("SELECT count(idx_mother) as `count` FROM {$this->idx_specs} ")->row()->count;
        /* num stk_code */
        $return['num_stk_code']['idx_compo_uni'] = $this->db->query("SELECT DISTINCT stk_code FROM {$this->idx_compo} ")->num_rows();
        $return['num_stk_code']['idx_compo'] = $this->db->query("SELECT count(stk_code) as `count` FROM {$this->idx_compo} ")->row()->count;
        return $return;
    }

    /*     * ***********************************************************************************************************
     * Name         ： checkout_update_nxt_date
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     *
     *
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC removal
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.05.29 (LongNguyen)
     * *************************************************************************************************************** */

    public function checkout_update_nxt_date() {
        $result = array();
        $sql = "UPDATE {$this->idx_composition}
                SET nxt_date =(SELECT `value` FROM `{$this->setting}` WHERE `key`='nxt_date' LIMIT 1)";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->idx_specs}
                SET {$this->idx_specs}.nxt_date =(SELECT `value` FROM `{$this->setting}` WHERE `key`='nxt_date' LIMIT 1)";
        $this->db->simple_query($sql);

        $sql = "UPDATE {$this->stk_prices}
           SET {$this->stk_prices}.nxt_date =(SELECT `value` FROM `{$this->setting}` WHERE `key`='nxt_date' LIMIT 1)";
        $this->db->simple_query($sql);

        $result['table'] = array(
            $this->idx_composition,
            $this->idx_specs,
            $this->stk_prices
        );

        return $result;
    }

    /*     * ***********************************************************************************************************
     * Name         ： update_idx_ca_from_event
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    public function update_idx_ca_from_event() {
        $result = array();
        $error = array();

        $nxt_date = $this->db->query("SELECT `value` FROM `{$this->setting}` WHERE `key`='nxt_date' LIMIT 1")->row_array();
        $nxt_date = $nxt_date['value'];

        $sql = "update {$this->idx_events} ev ,stk_prices pr set ev.pclose='' WHERE ev.date='{$nxt_date}' AND pr.stk_code=ev.stk_code";
        $this->db->query($sql);

        $sql = "update {$this->idx_events} ev ,stk_prices pr set ev.pclose=pr.stk_price WHERE ev.date='{$nxt_date}' AND pr.stk_code=ev.stk_code";
        $this->db->query($sql);
        //$result['update-pclose'] = $this->db->affected_rows();
        $sql = "SELECT 
                    ev.stk_code,
                    ev.idx_code,
                    ev.date,
                    ROUND((SELECT stk_shares_idx FROM {$this->idx_compo} comp WHERE comp.idx_code=ev.idx_code AND comp.stk_code=ev.stk_code )*ev.ratio, 0) AS new_shares,
                    ev.pclose*(1/ev.ratio) AS adj_close,
                     1 AS stk_split,
                     events AS event_name,
                     id AS id_event_insert
               FROM {$this->idx_events} ev
                     WHERE ev.events='SPLIT' AND (ev.status!='done' || ISNULL(ev.status)) AND ev.date='{$nxt_date}'";
        $split = $this->db->query($sql)->result_array();
        if (is_array($split) && count($split) > 0) {
            foreach ($split as $key => $value) {
                $check = $this->db->query("SELECT id,stk_code,idx_code,date,new_shares,adj_close,stk_split,event_name FROM {$this->idx_ca} ca
                    WHERE ca.stk_code='{$value['stk_code']}' 
                    AND ca.idx_code='{$value['idx_code']}' 
                    AND ca.date='{$value['date']}' ");
                if ($check->num_rows() == 0) {
                    $this->db->insert($this->idx_ca, $value);
                } else {
                    //check lai
                    $check_again = $this->db->query("SELECT id FROM {$this->idx_ca} ca
                    WHERE ca.stk_code='{$value['stk_code']}' 
                    AND ca.idx_code='{$value['idx_code']}' 
                    AND ca.date='{$value['date']}'
                    AND ca.new_shares='{$value['new_shares']}'
                    AND ca.adj_close='{$value['adj_close']}'
                    AND ca.stk_split=1
                    AND ca.event_name='{$value['event_name']}'");
                    if ($check_again->num_rows() == 0) {
                        $result['split']['error'][$key] = $value;
                        $this->db->query("UPDATE {$this->idx_events} SET `status`='error' WHERE `id`='{$value['id_event_insert']}'");
                        $result['split']['ca'][$key] = $check->row_array();
                    }
                }
            }
        }

        $sql = "
          SELECT
          ev.stk_code,
          ev.idx_code,
          ev.date,
          ev.pclose*(ev.old/(ev.old+ev.new)) AS adj_close,
          events AS event_name,
          id AS id_event_insert
          FROM {$this->idx_events} ev
          WHERE ev.events='STOCK SPLIT' AND (ev.status!='done' || ISNULL(ev.status)) AND ev.date='{$nxt_date}'";
        $this->db->query($sql);
        $stock_split = $this->db->query($sql)->result_array();
        if (is_array($stock_split) && count($stock_split) > 0) {
            foreach ($stock_split as $key => $value) {
                $check = $this->db->query("SELECT id,stk_code,idx_code,date,adj_close,event_name FROM {$this->idx_ca} ca
                    WHERE ca.stk_code='{$value['stk_code']}' 
                    AND ca.idx_code='{$value['idx_code']}' 
                    AND ca.date='{$value['date']}' ");
                if ($check->num_rows() == 0) {
                    $this->db->insert($this->idx_ca, $value);
                } else {
                    //check lai
                    $check_again = $this->db->query("SELECT id FROM {$this->idx_ca} ca
                    WHERE ca.stk_code='{$value['stk_code']}' 
                    AND ca.idx_code='{$value['idx_code']}' 
                    AND ca.date='{$value['date']}'
                    AND ca.adj_close='{$value['adj_close']}'
                    AND ca.event_name='{$value['event_name']}'");
                    if ($check_again->num_rows() == 0) {
                        $result['stock_split']['error'][$key] = $value;
                        $this->db->query("UPDATE {$this->idx_events} SET `status`='error' WHERE `id`='{$value['id_event_insert']}'");
                        $result['stock_split']['ca'][$key] = $check->row_array();
                    }
                }
            }
        }

        //(`stk_code`,`idx_code`,`date`,`adj_close`,`id_event_insert`,`event_name`)
        $sql = "SELECT
                        ev.stk_code,
                        ev.idx_code,
                        ev.date,
                        ((ev.pclose*ev.old)+(ev.prices*ev.new))/(ev.old+ev.new) AS adj_close,
                        events AS event_name,
                        id AS id_event_insert
                 FROM {$this->idx_events} ev
                 WHERE ev.events='RIGHT' AND (ev.status!='done' || ISNULL(ev.status)) AND ev.prices < ev.pclose AND ev.date='{$nxt_date}'";
        $this->db->query($sql);
        $right = $this->db->query($sql)->result_array();
        if (is_array($right) && count($right) > 0) {
            foreach ($right as $key => $value) {
                $check = $this->db->query("SELECT id,stk_code,idx_code,date,adj_close,event_name FROM {$this->idx_ca} ca
                    WHERE ca.stk_code='{$value['stk_code']}' 
                    AND ca.idx_code='{$value['idx_code']}' 
                    AND ca.date='{$value['date']}' ");
                if ($check->num_rows() == 0) {
                    $this->db->insert($this->idx_ca, $value);
                } else {
                    //check lai
                    $check_again = $this->db->query("SELECT id FROM {$this->idx_ca} ca
                    WHERE ca.stk_code='{$value['stk_code']}' 
                    AND ca.idx_code='{$value['idx_code']}' 
                    AND ca.date='{$value['date']}'
                    AND ca.adj_close='{$value['adj_close']}'
                    AND ca.event_name='{$value['event_name']}'");
                    if ($check_again->num_rows() == 0) {
                        $result['right']['error'][$key] = $value;
                        $this->db->query("UPDATE {$this->idx_events} SET `status`='error' WHERE `id`='{$value['id_event_insert']}'");
                        $result['right']['ca'][$key] = $check->row_array();
                    }
                }
            }
        }

        $sql = "update {$this->idx_events} ev,{$this->idx_ca} ca set ev.`status`='done' where ev.id=ca.id_event_insert";
        $this->db->simple_query($sql);

        $sql = "update {$this->idx_ca} ca set ca.id_event_insert=''";
        $this->db->simple_query($sql);

        self::_update_to_adjust();
        return $result;
    }

    /*     * ***********************************************************************************************************
     * Name         ： apply_idx_ca_from_event
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2012.09.12 (LongNguyen)
     * *************************************************************************************************************** */

    function apply_idx_ca_from_event($idca, $idev) {
        if ($idca != '' && $idev != '') {
            $ev = $this->db->query("select * from {$this->idx_events} WHERE id='{$idev}'")->row_array();
            if (is_array($ev) && count($ev) > 0) {
                switch ($ev['events']) {
                    case 'SPLIT':
                        $sql = "update {$this->idx_ca}
                        set `stk_code`='{$ev['stk_code']}',
                        `idx_code`='{$ev['idx_code']}',
                        `date`='{$ev['date']}',
                        `new_shares`=((SELECT stk_shares_idx FROM {$this->idx_compo} comp WHERE comp.idx_code='{$ev['idx_code']}' AND comp.stk_code='{$ev['stk_code']}')*{$ev['ratio']}),
                        `adj_close`='" . $ev['pclose'] * (1 / $ev['ratio']) . "',
                        `stk_split`=1,
                        `event_name`='{$ev['events']}' where id='{$idca}'";
                        $query = $this->db->query($sql);
                        if ($query != FALSE) {
                            $sql = "update {$this->idx_events} ev set ev.`status`='done' where ev.id='{$idev}'";
                            $this->db->simple_query($sql);
                            return TRUE;
                        }
                        break;
                    case 'STOCK SPLIT':
                        $sql = "update {$this->idx_ca}
                        set `stk_code`='{$ev['stk_code']}',
                        `idx_code`='{$ev['idx_code']}',
                        `date`='{$ev['date']}',
                        `adj_close`='" . $ev['pclose'] * ($ev['old'] / ($ev['old'] + $ev['new'])) . "',
                        `event_name`='{$ev['events']}' where id='{$idca}'";
                        $query = $this->db->query($sql);
                        if ($query != FALSE) {
                            $sql = "update {$this->idx_events} ev set ev.`status`='done' where ev.id='{$idev}'";
                            $this->db->simple_query($sql);
                            return TRUE;
                        }
                        break;
                    case 'RIGHT':
                        $sql = "update {$this->idx_ca}
                        set `stk_code`='{$ev['stk_code']}',
                        `idx_code`='{$ev['idx_code']}',
                        `date`='{$ev['date']}',
                        `adj_close`='" . (($ev['pclose'] * $ev['old']) + ($ev['prices'] * $ev['new'])) / ($ev['old'] + $ev['new']) . "',
                        `event_name`='{$ev['events']}' where id='{$idca}'";
                        $query = $this->db->query($sql);
                        if ($query != FALSE) {
                            $sql = "update {$this->idx_events} ev set ev.`status`='done' where ev.id='{$idev}'";
                            $this->db->simple_query($sql);
                            return TRUE;
                        }
                        break;
                    default:
                        return FALSE;
                        break;
                }
            }
            return FALSE;
        }
        return FALSE;
    }

    /*     * ***********************************************************************************************************
     * Name         ： _update_to_adjust
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.07.30 (Nguyen Tuan Anh)
     * *************************************************************************************************************** */

    function _update_to_adjust() {
        $sql = "UPDATE {$this->idx_ca}, {$this->setting}
                SET to_adjust = IF(stk_split = 1, 0, 1)
                WHERE date = {$this->setting}.value
                AND {$this->setting}.key = 'nxt_date';";
        $this->db->query($sql);
    }

    /*     * ***********************************************************************************************************
     * Name         ： update_idx_currency_from_cur_rates_histoday
     * -----------------------------------------------------------------------------------------------------------------
     * Description  ：
     * -----------------------------------------------------------------------------------------------------------------
     * Params       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Return       ：
     * -----------------------------------------------------------------------------------------------------------------
     * Warning      ：
     * -----------------------------------------------------------------------------------------------------------------
     * Copyright    ： IFRC
     * -----------------------------------------------------------------------------------------------------------------
     * M001         ： New  2013.11.21 (Nguyen Tuan Anh)
     * *************************************************************************************************************** */

    function update_idx_currency_from_cur_rates_histoday() {
        $sql = "SELECT cur_code, cur_from, cur_to, close, date, cur_time, close open, close high, close low
                FROM idx_currency
                WHERE CONCAT(cur_code, date) NOT IN (SELECT CONCAT(code, date) FROM cur_rates_histoday)
                UNION
                SELECT code cur_code, currency cur_from, tos cur_to, curr_conv close, date, time cur_time, curr_conv open, curr_conv high, curr_conv low
                FROM cur_rates_histoday
                ORDER BY date ASC;";
        $currency = $this->db->query($sql)->result_array();

        $this->db->truncate('idx_currency');

        $this->db->insert_batch('idx_currency', $currency);
    }

}
